local builder = ll.class(ll.ContainerNodeBuilder)

builder.name = 'lluvia/viz/colormap/ColorMap'
builder.doc = [[
Maps numeric values to colors.

Parameters
----------
color_map : string. Defaults to "Gray".
    The color map to use. Possible values are:
    - "Gray"
    - "Viridis"

min_value : float. Defaults to 0.0.
    The minimum value of the input image.

max_value : float. Defaults to 1.0.
    The maximum value of the input image.

alpha : float. Defaults to 0.0.
    The alpha value of the output image.

Inputs
------
in_image : ImageView.
    {r8ui, r8i, r16f, r32f} image. Input image.

Outputs
-------
out_image : ImageView
    rgba8ui image. The encoded color of the optical flow field.

]]

-- I could add attributes to the builder
builder.colorMaps = {}
builder.colorMaps['viridis'] = 'RQJVAEUDVgBFBFgARgZZAEYHWwBGCVwARwpdAEcMXwBHDWAARw9iAEgQYwBIEmQASBNmAEgVZwBIFmgASBdqAEgZawBJGmwASRttAEkdbwBJHnAASR9xAEkhcgBJInMASSN0AEkkdQBIJnYASCd3AEgoeABIKXkASCt6AEgsewBILXwARy59AEcwfQBHMX4ARzJ/AEYzgABGNYAARjaBAEY3ggBFOIIARTqDAEQ7hABEPIQARD2FAEM+hQBDP4YAQ0GGAEJChwBCQ4cAQUSIAEFFiABARogAQEiJAD9JiQA/SooAPkuKAD5MigA+TYoAPU6LAD1PiwA8UYsAPFKLADtTjAA7VIwAOlWMADpWjAA5V4wAOViNADhZjQA4Wo0AN1uNADdcjQA2XY0ANl6NADVfjgA1YI4ANGGOADRijgAzY44AM2SOADJljgAyZo4AMmeOADFojgAxaY4AMGqOADBrjgAvbI8AL22PAC9ujwAub48ALnCPAC1xjwAtco8ALXOPACx0jwAsdY8AK3aPACt3jwAreI8AKnmPACp6jwApe48AKXuPACl8jwAofY8AKH6PACh/jwAngI8AJ4GPACeCjwAmg48AJoSOACWFjgAlho4AJYeOACSIjgAkiY4AJIqOACOKjgAji44AI4yOACKNjgAijo0AIo+NACGQjQAhkY0AIZKNACCTjQAglIwAIJWMACCWjAAgl4wAH5iLAB+ZiwAfmosAH5qLAB+bigAfnIoAH52KAB+eiQAfn4kAH6CJAB+hiAAgoogAIKOHACCkhwAhpYYAIaaGACKnhgAiqIUAI6iFACSphAAkqoMAJauDACasggAnrYIAKK6BACmvgAAqsIAAK7F/ACyyfgAtsn4AL7N9ADC0fAAxtXsAM7Z7ADS3egA2uHkAN7l4ADm6dwA6uncAPLt2AD68dQA/vXQAQb5zAEO/cgBFv3EARsBwAEjBbwBKwm4ATMNtAE7DbABQxGoAUsVpAFTGaABWx2cAWMdmAFrIZQBcyWMAX8piAGHKYQBjy2AAZcxeAGjNXQBqzVwAbM5aAG7PWQBxz1cAc9BWAHXRVQB40VMAetJSAH3TUAB/008AgtRNAITUTACH1UoAidZIAIzWRwCO10UAkddEAJPYQgCW2EAAmNk/AJvZPQCe2jsAoNo5AKPbOACm2zYAqNw0AKvcMwCu3TEAsN0vALPeLQC23iwAuN4qALvfKAC+3ycAwOAlAMPgIwDG4CIAyOEgAMvhHwDO4R4A0OIdANPiHADV4hsA2OMaANvjGQDd4xkA4OQZAOLkGQDl5BkA6OUaAOrlGgDt5RsA7+YcAPLmHQD05h8A9+cgAPnnIgD75yMA/uglAA=='
builder.colorMaps['plasma'] = 'DQiHABEIiAAUB4oAFgeLABkHjAAcB40AHgeOACAGjwAiBpAAJAaRACYGkgAoBpMAKgaUACwGlQAuBZUAMAWWADIFlwA0BZgANQWZADcFmQA5BZoAOwWbADwEmwA+BJwAQASdAEEEnQBDBJ4ARQSfAEYEnwBIA6AASgOgAEsDoQBNA6IATwOiAFADowBSAqMAUwKkAFUCpABXAqQAWAKlAFoCpQBbAaYAXQGmAF8BpgBgAacAYgGnAGMBpwBlAagAZgGoAGgBqABpAagAawGoAG0BqQBuAakAcAGpAHEBqQBzAakAdAGpAHYBqQB3AqkAeQKpAHoCqQB8A6kAfQOoAH8EqACABKgAggWoAIMFqACFBqcAhgenAIcIpwCJCKYAigmmAIwKpQCNC6UAjw2lAJAOpACRD6QAkxCjAJQRogCWEqIAlxOhAJgUoQCaFaAAmxafAJwYnwCeGZ4AnxqdAKAbnAChHJwAox2bAKQemgClH5kApiCYAKgimACpI5cAqiSWAKsllQCtJpQArieTAK8okgCwKZEAsSuQALIskACzLY8AtS6OALYvjQC3MIwAuDGLALkzigC6NIkAuzWIALw2hwC9N4YAvjiFAL85hADAOoMAwTyCAMI9gQDDPoEAxD+AAMVAfwDGQX4Ax0J9AMhDfADJRXsAykZ6AMtHeQDMSHgAzUl3AM5KdgDPS3YA0Ex1ANFOdADST3MA0lByANNRcQDUUnAA1VNvANZUbgDXVm4A2FdtANhYbADZWWsA2lpqANtbaQDcXGgA3V5nAN1fZwDeYGYA32FlAOBiZADgY2MA4WViAOJmYQDjZ2EA5GhgAORpXwDla14A5mxdAOZtXADnblsA6G9bAOlxWgDpclkA6nNYAOt0VwDrdVYA7HdVAO14VQDteVQA7npTAO58UgDvfVEA8H5QAPB/TwDxgU4A8YJOAPKDTQDzhUwA84ZLAPSHSgD0iEkA9YpIAPWLSAD2jEcA9o5GAPePRQD3kEQA95JDAPiTQgD4lEIA+ZZBAPmXQAD5mT8A+po+APqbPQD7nTwA+547APugOwD7oToA/KM5APykOAD8pTcA/ac2AP2oNgD9qjUA/as0AP2tMwD9rjIA/rAyAP6xMQD+szAA/rQvAP62LgD+ty4A/rktAP66LAD+vCwA/r0rAP6/KgD+wSoA/sIpAP7EKQD+xSgA/scnAP3IJwD9yicA/cwmAP3NJgD9zyYA/NElAPzSJQD81CUA+9YlAPvXJQD72SUA+tolAPrcJQD53iUA+eAlAPjhJQD44yYA9+UmAPfmJgD26CcA9uonAPXrJwD07ScA9O8nAPPxJwDz8icA8vQnAPH2JgDx9yQA8PkiAA=='
builder.colorMaps['inferno'] = 'AQEEAAEBBQABAQcAAgEIAAICCgACAgwAAwIPAAMDEQAEAxMABQQVAAUEFwAGBRkABwUcAAgGHgAJByAACgciAAsIJAAMCCcADgkpAA8JKwAQCi4AEQowABMLMwAUCzUAFQw3ABcMOgAYDDwAGgw/ABsMQQAdDUQAHg1GACANSAAhDUsAIwxNACUMTwAnDFEAKAxTACoMVQAsC1cALgtZAC8LWwAxC10AMwpeADUKYAA2CmEAOApiADoKYwA8CmUAPQpmAD8KZwBBCmcAQgpoAEQLaQBGC2oARwtqAEkMawBLDGsATA1sAE4NbABQDm0AUQ5tAFMPbQBUD24AVhBuAFgQbgBZEW4AWxJuAFwSbwBeE28AYBNvAGEUbwBjFW8AZBVvAGYWbwBnFm8AaRdvAGsYbwBsGG8AbhlvAG8ZbwBxGm8AcxpuAHQbbgB2HG4AdxxuAHkdbgB7HW4AfB5tAH4ebQB/H20AgSBsAIIgbACEIWwAhiFrAIciawCJImsAiiNqAIwjagCOJGoAjyVpAJElaQCSJmgAlCZoAJYnZwCXJ2cAmShmAJopZQCcKWUAnSpkAJ8qZAChK2MAoixiAKQsYgClLWEApy1gAKguYACqL18ArC9eAK0wXQCvMVwAsDJcALIyWwCzM1oAtTRZALY0WAC4NVcAuTZXALs3VgC8OFUAvjhUAL85UwDAOlIAwjtRAMM8UADFPU8Axj5OAMg/TQDJP0wAykBLAMxBSgDNQkkAzkNIANBFRwDRRkUA0kdEANNIQwDVSUIA1kpBANdLQADYTD8A2k4+ANtPPADcUDsA3VE6AN5TOQDfVDgA4FU3AOFXNQDjWDQA5FkzAOVbMgDmXDEA510vAOdfLgDoYC0A6WIsAOpjKwDrZSkA7GYoAO1oJwDuaSYA7mskAO9tIwDwbiIA8XAgAPFxHwDycx4A83UdAPN2GwD0eBoA9HoZAPV7FwD2fRYA9n8VAPeBEwD3ghIA+IQRAPiGDwD5iA4A+YkNAPmLDAD6jQoA+o8JAPqRCQD7kggA+5QHAPuWBwD7mAcA/JoHAPycBwD8ngcA/J8IAPyhCAD8owkA/KULAPynDAD8qQ4A/KsPAPytEQD8rxMA/LEVAPyyFwD8tBkA/LYbAPy4HQD8uh8A+7wiAPu+JAD7wCYA+8IpAPrEKwD6xi0A+sgwAPnKMgD5zDUA+c44APjQOwD40j0A99RAAPfWQwD22EYA9tpJAPXcTAD13VAA9N9TAPThVwD041oA8+VeAPPnYQDy6WUA8uppAPLsbQDy7nEA8u91APLxegDy834A8/SCAPP1hgD094oA9fiOAPb5kgD3+5YA+PyaAPr9ngD7/qEA/f+lAA=='
builder.colorMaps['magma'] = 'AQEEAAEBBQABAQcAAgEIAAICCgACAgwAAwMOAAMDEAAEBBIABQQUAAUFFgAGBRgABwYaAAgGHAAJBx4ACgggAAsIIwAMCSUADQonAA4LKQAPCysAEAwtABENMAASDTIAEw40ABUONgAWDzkAFw87ABgQPQAZEEAAGxFCABwRRQAdEUcAHxFKACASTAAhEk4AIxJRACQSUwAmElYAJxJYACkSWgArEl0ALBJfAC4RYQAwEWMAMRFmADMRaAA1EWkANhBrADgQbQA6EG8APBBwAD0QcgA/EHMAQRB0AEMQdQBEEHYARhB3AEgQeABJEXkASxF6AEwRegBOEnsAUBJ8AFETfABTE30AVBR9AFYUfgBYFX4AWRZ/AFsWfwBcF38AXhh/AF8YgABhGYAAYhmAAGQagABmG4EAZxuBAGkcgQBqHYEAbB2BAG0egQBvH4IAcB+CAHIgggB0IIIAdSGCAHciggB4IoIAeiOCAHsjggB9JIIAfyWCAIAlggCCJoIAgyaCAIUnggCGJ4IAiCiCAIopggCLKYIAjSqBAI4qgQCQK4EAkiuBAJMsgQCVLIEAli2BAJgtgACaLoAAmy6AAJ0vgACfL38AoDB/AKIwfwCkMX8ApTF+AKcyfgCoMn4AqjN9AKw0fQCtNHwArzV8ALE1fACyNnsAtDZ7ALY3egC3N3oAuTh5ALo4eQC8OXgAvjp4AL86dwDBO3YAwzt2AMQ8dQDGPXUAxz10AMk+cwDLP3MAzD9yAM5AcQDPQXEA0UJwANJDbwDUQ24A1URuANdFbQDYRmwA2kdrANtIagDdSWoA3kppAN9LaADhTGcA4k1nAONOZgDlT2UA5lFkAOdSYwDoU2MA6VViAOtWYQDsV2EA7VlgAO5aYADvXF8A715eAPBfXgDxYV4A8mJdAPNkXQD0Zl0A9GhcAPVpXAD2a1wA9m1cAPdvXAD3cVwA+HJcAPh0XQD5dl0A+XhdAPp6XQD6fF4A+n5eAPuAXwD7gV8A+4NgAPyFYQD8h2EA/IliAPyLYwD9jWQA/Y9kAP2RZQD9k2YA/ZRnAP6WaAD+mGkA/ppqAP6cawD+nmwA/qBtAP6ibwD+o3AA/qVxAP+ncgD/qXQA/6t1AP+tdgD/r3cA/7B5AP+yegD/tHwA/7Z9AP+4fgD/uoAA/7yBAP+9gwD/v4QA/8GGAP/DhwD/xYkA/8eKAP/IjAD/yo4A/8yPAP7OkQD+0JMA/tKUAP7TlgD+1ZgA/teZAP7ZmwD+250A/t2eAP7eoAD+4KIA/uKkAP3kpgD95qcA/eepAP3pqwD9660A/e2vAP3vsQD98bIA/fK0AP30tgD99rgA/Pi6APz6vAD8+74A/P3AAA=='
builder.colorMaps['cividis'] = 'ACNOAAAkUAAAJFEAACVTAAAmVQAAJ1YAACdYAAAoWgAAKVwAACldAAAqXwAAK2EAACtjAAAsZQAALWcAAC1oAAAuagAAL2wAADBuAAAwcAAAMXEAADFxAAAycQABMnEABTNxAAk0cQAMNHEADzVxABI2cAAVN3AAFzdwABk4cAAbOXAAHTlvAB46bwAgO28AIjxvACM8bwAlPW8AJj5uACg+bgApP24AK0BuACxAbgAtQW4AL0JtADBDbQAxQ20AMkRtADNFbQA1RW0ANkZtADdHbQA4R20AOUhtADpJbQA7SWwAPEpsAD5LbAA/TGwAQExsAEFNbABCTmwAQ05sAERPbABFUGwARlBsAEdRbABIUmwASVJsAEpTbABLVGwATFVtAE1VbQBOVm0AT1dtAE9XbQBQWG0AUVltAFJZbQBTWm0AVFttAFVbbQBWXG4AV11uAFhebgBZXm4AWl9uAFpgbgBbYG4AXGFvAF1ibwBeYm8AX2NvAGBkbwBhZW8AYmVwAGJmcABjZ3AAZGdwAGVocABmaXEAZ2pxAGhqcQBpa3EAaWxyAGpscgBrbXIAbG5yAG1ucwBub3MAb3BzAG9xdABwcXQAcXJ0AHJzdABzdHUAdHR1AHV1dgB1dnYAdnZ2AHd3dwB4eHcAeXl3AHp5eAB6engAe3t4AHx8eAB9fHkAfn15AH9+eQCAfnkAgX95AIKAeQCDgXkAhIF5AIWCeQCGg3kAhoR5AIeEeQCIhXkAiYZ5AIqHeQCLh3kAjIh5AI2JeQCOinkAj4p5AJCLeACRjHgAko14AJONeACUjngAlY94AJaQeACXkHgAmJF3AJmSdwCak3cAm5R3AJyUdwCdlXcAnpZ2AJ+XdgCgl3YAoZh2AKKZdQCjmnUApJt1AKWbdQCmnHQAp510AKiedACpn3QAqp9zAKugcwCsoXMAraJyAK6jcgCvo3IAsKRxALGlcQCypnEAs6dwALSncAC1qHAAtqlvALeqbwC4q24AuaxuALqsbgC7rW0AvK5tAL2vbAC+sGwAv7FrAMCxawDCsmoAw7NqAMS0aQDFtWkAxrZoAMe2aADIt2cAybhmAMq5ZgDLumUAzLtlAM28ZADOvWMAz71jANC+YgDRv2EA08BhANTBYADVwl8A1sNfANfEXgDYxF0A2cVcANrGWwDbx1sA3MhaAN3JWQDfylgA4MtXAOHMVgDizVUA481UAOTOUwDlz1IA5tBRAOfRUADp0k8A6tNOAOvUTQDs1UwA7dZLAO7XSQDv2EgA8NlHAPLaRQDz20QA9NtDAPXcQQD23UAA994+APnfPAD64DsA++E5APziNwD+4zUA/uQ0AP7mNQD+5zcA/ug4AA=='
builder.colorMaps['gray'] = 'AAAAAAEBAQACAgIAAwMDAAQEBAAFBQUABgYGAAcHBwAICAgACQkJAAoKCgALCwsADAwMAA0NDQAODg4ADw8PABAQEAAREREAEhISABMTEwAUFBQAFRUVABYWFgAXFxcAGBgYABkZGQAaGhoAGxsbABwcHAAdHR0AHh4eAB8fHwAgICAAISEhACIiIgAjIyMAJCQkACUlJQAmJiYAJycnACgoKAApKSkAKioqACsrKwAsLCwALS0tAC4uLgAvLy8AMDAwADExMQAyMjIAMzMzADQ0NAA1NTUANjY2ADc3NwA4ODgAOTk5ADo6OgA7OzsAPDw8AD09PQA+Pj4APz8/AEBAQABBQUEAQkJCAENDQwBEREQARUVFAEZGRgBHR0cASEhIAElJSQBKSkoAS0tLAExMTABNTU0ATk5OAE9PTwBQUFAAUVFRAFJSUgBTU1MAVFRUAFVVVQBWVlYAV1dXAFhYWABZWVkAWlpaAFtbWwBcXFwAXV1dAF5eXgBfX18AYGBgAGFhYQBiYmIAY2NjAGRkZABlZWUAZmZmAGdnZwBoaGgAaWlpAGpqagBra2sAbGxsAG1tbQBubm4Ab29vAHBwcABxcXEAcnJyAHNzcwB0dHQAdXV1AHZ2dgB3d3cAeHh4AHl5eQB6enoAe3t7AHx8fAB9fX0Afn5+AH9/fwCAgIAAgYGBAIKCggCDg4MAhISEAIWFhQCGhoYAh4eHAIiIiACJiYkAioqKAIuLiwCMjIwAjY2NAI6OjgCPj48AkJCQAJGRkQCSkpIAk5OTAJSUlACVlZUAlpaWAJeXlwCYmJgAmZmZAJqamgCbm5sAnJycAJ2dnQCenp4An5+fAKCgoAChoaEAoqKiAKOjowCkpKQApaWlAKampgCnp6cAqKioAKmpqQCqqqoAq6urAKysrACtra0Arq6uAK+vrwCwsLAAsbGxALKysgCzs7MAtLS0ALW1tQC2trYAt7e3ALi4uAC5ubkAurq6ALu7uwC8vLwAvb29AL6+vgC/v78AwMDAAMHBwQDCwsIAw8PDAMTExADFxcUAxsbGAMfHxwDIyMgAycnJAMrKygDLy8sAzMzMAM3NzQDOzs4Az8/PANDQ0ADR0dEA0tLSANPT0wDU1NQA1dXVANbW1gDX19cA2NjYANnZ2QDa2toA29vbANzc3ADd3d0A3t7eAN/f3wDg4OAA4eHhAOLi4gDj4+MA5OTkAOXl5QDm5uYA5+fnAOjo6ADp6ekA6urqAOvr6wDs7OwA7e3tAO7u7gDv7+8A8PDwAPHx8QDy8vIA8/PzAPT09AD19fUA9vb2APf39wD4+PgA+fn5APr6+gD7+/sA/Pz8AP39/QD+/v4A////AA=='
builder.colorMaps['purples'] = '/Pv9APz7/QD8+/0A+/r9APv6/AD6+fwA+vn8APr4/AD5+PsA+fj7APj3+wD49/sA+Pb6APf2+gD39foA9vX6APb0+QD29PkA9fT5APXz+QD08/gA9PL4APTy+ADz8fgA8/H3APLx9wDy8PcA8fD3APHv9gDx7/YA8O72APDu9gDv7fUA7+31AO7s9QDt7PUA7ev0AOzq9ADr6vQA6+nzAOrp8wDp6PMA6efyAOjn8gDo5vIA5+bxAObl8QDm5PEA5eTwAOTj8ADk4/AA4+LvAOLi7wDi4e8A4eDvAODg7gDg3+4A39/uAN7e7QDe3e0A3d3tANzc7ADc3OwA29vsANra6wDZ2esA2NjqANfY6gDW1+kA1tbpANXV6QDU1OgA09PoANLS5wDR0ecA0NDmAM/P5gDOzuUAzc7lAMzN5ADLzOQAysvjAMnK4wDIyeIAx8jiAMbH4QDGxuEAxcXhAMTE4ADDxOAAwsPfAMHC3wDAwd4Av8DeAL6/3QC9vt0AvL3cALu83AC6u9sAubraALi52gC3uNkAtrbYALa12AC1tNcAtLPXALOy1gCysdUAsbDVALCv1ACvrtMArq3TAK2s0gCsqtIAq6nRAKqo0ACpp9AAqKbPAKelzgCmpM4ApqPNAKWizQCkocwAo5/LAKKeywChncoAoJzJAJ+byQCemsgAnZnIAJyYxwCbl8cAmpbHAJmVxgCYlcYAl5TFAJaTxQCWksQAlZHEAJSQwwCTj8MAko7DAJGNwgCQjMIAj4vBAI6LwQCNisAAjInAAIuIvwCKh78AiYa/AIiFvgCHhL4AhoO9AIaCvQCFgbwAhIG8AIOAvACCf7sAgX67AIB9ugB/e7kAf3q5AH54uAB9d7cAfXa2AHx0tgB7c7UAe3K0AHpwtAB5b7MAeG2yAHhssQB3a7EAdmmwAHZorwB1Z68AdGWuAHRkrQBzYqwAcmGsAHJgqwBxXqoAcF2pAHBcqQBvWqgAblmnAG1XpwBtVqYAbFWlAGtTpABrUqQAalGjAGlPogBpTqIAaE2hAGdLoQBnSqAAZkmfAGVHnwBkRp4AZEWdAGNDnQBiQpwAYkGbAGE/mwBgPpoAYD2aAF87mQBeOpgAXjmYAF03lwBcNpYAWzWWAFs0lQBaMpUAWTGUAFkwkwBYLpMAVy2SAFcskQBWKpEAVSmQAFUokABUJo8AUyWOAFMkjgBSI40AUSKNAFEgjABQH4wATx6LAE8digBOG4oATRqJAE0ZiQBMGIgASxeIAEsVhwBKFIcASROGAEkShQBIEIUARw+EAEcOhABGDYMARQyDAEUKggBECYEAQwiBAEMHgABCBYAAQQR/AEEDfwBAAn4APwB9AA=='
builder.colorMaps['blues'] = '9/v/APf7/wD2+v8A9fr/APT5/gD0+f4A8/j+APL4/gDx9/0A8Pf9APD2/QDv9v0A7vX8AO31/ADt9PwA7PT8AOvz+wDq8/sA6fL7AOny+wDo8foA5/H6AObw+gDl8PoA5e/5AOTv+QDj7vkA4u75AOLt+ADh7fgA4Oz4AN/s+ADe6/cA3uv3AN3q9wDc6vcA2+n2ANvp9gDa6PYA2ej2ANjn9QDY5/UA1+b1ANbm9QDV5fQA1eX0ANTk9ADT5PQA0uPzANLj8wDR4vMA0OLzAM/h8gDP4fIAzuDyAM3g8gDM3/EAzN/xAMve8QDK3vEAyd3wAMnd8ADI3PAAx9zwAMbb7wDF2+8AxNrvAMLa7gDB2e4AwNntAL/Y7QC92OwAvNfsALvX6wC61usAuNXrALfV6gC21OoAtdTpALPT6QCy0+gAsdLoALDS5wCu0ecArdHnAKzQ5gCr0OYAqc/lAKjP5QCnzuQAps3kAKTN5ACjzOMAoszjAKHL4gCfy+IAnsrhAJzJ4QCbyOEAmcjgAJfH4ACWxuAAlMXfAJPE3wCRw98Aj8LeAI7B3gCMwd4Ai8DdAIm/3QCHvt0Ahr3cAIS83ACDu9wAgbrbAH+52wB+udoAfLjaAHu32gB5ttkAd7XZAHa02QB0s9gAc7LYAHGy2ABvsdcAbrDXAGyv1wBrrtYAaq3WAGis1QBnq9UAZqvUAGSq1ABjqdMAYqjTAGGn0gBfptIAXqXRAF2k0QBbpNAAWqPQAFmizwBYoc8AVqDOAFWfzgBUns0AUp3NAFGczABQnMwAT5vLAE2aywBMmcoAS5jKAEmXyQBIlskAR5XIAEaVyABElMcAQ5PHAEKSxgBBkcYAQJDFAD+PxQA+jsQAPY3EADyMwwA7i8IAOorCADmJwQA3h8EANobAADWFwAA0hL8AM4O/ADKCvgAxgb4AMIC9AC9/vQAufrwALX28ACx8uwAre7oAKnq6ACl5uQAoeLkAJ3e4ACZ2uAAldbcAJHS3ACNztgAicrYAIXG1ACBwtAAfb7MAH26zAB5tsgAdbLEAHGuwABtqrwAbaa8AGmiuABlnrQAYZqwAGGWsABdkqwAWY6oAFWKpABRhqAAUYKgAE1+nABJepgARXaUAEFykABBbpAAPWqMADlmiAA1YoQANV6EADFagAAtVnwAKVJ4ACVOdAAlSnQAIUZsACFCaAAhPmAAITZcACEyVAAhLkwAISpIACEmQAAhIjwAIR40ACEaMAAhFigAIRIkACEOHAAhChgAIQYQACECDAAg/gQAIPn8ACD1+AAg8fAAIO3sACDp5AAg5eAAIOHYACDd1AAg2cwAINXIACDRwAAgzbwAIMm0ACDBrAA=='
builder.colorMaps['greens'] = '9/z1APf89QD2/PQA9vz0APX88wD1+/IA9PvyAPT78QDz+/AA8vvwAPL67wDx+u4A8fruAPD67QDw+ewA7/nsAO756wDu+eoA7fnqAO346QDs+OgA7PjoAOv45wDr9+YA6vfmAOn35QDp9+QA6PfkAOj24wDn9uIA5/biAOb24QDl9eAA5PXfAOT13gDj9N0A4vTcAOH02wDg89oA3/PZAN7y2ADd8tcA3PLWANvx1QDa8dQA2fHTANjw0gDX8NEA1u/QANXvzwDU784A1O7NANPuzADS7ssA0e3KANDtyQDP7MgAzuzHAM3sxgDM68UAy+vEAMrrwwDJ6sIAyOrBAMfpwADG6b8Axei+AMTovQDC57wAwee6AMDmuQC/5rgAvuW3ALzltgC75LUAuuSzALnjsgC447EAt+KwALXirwC04a4As+GsALLgqwCx4KoAr9+pAK7fqACt3qcArN6mAKvdpACp3aMAqNyiAKfcoQCm26AApdufAKPanQCi2pwAodmbAKDZmgCe2JkAndeYAJvXlgCa1pUAmNWUAJfVkwCW1JIAlNORAJPTjwCR0o4AkNGNAI/RjACN0IsAjM+KAIrPiACJzocAiM2GAIbNhQCFzIQAg8uDAILLggCAyoAAf8l/AH7JfgB8yH0Ae8d8AHnHewB4xnkAd8V4AHXFdwB0xHYAcsN1AHDDdQBvwnQAbcFzAGzAcgBqv3EAaL9xAGe+cABlvW8AZLxuAGK7bQBgu20AX7psAF25awBcuGoAWrhqAFi3aQBXtmgAVbVnAFS0ZgBStGYAULNlAE+yZABNsWMATLBiAEqwYgBIr2EAR65gAEWtXwBErV8AQqxeAEGrXQBAqlwAP6lcAD6oWwA9p1oAPKZZADulWQA6pFgAOaNXADiiVgA3oVUAN6BVADafVAA1nlMANJ1SADOcUgAym1EAMZpQADCZTwAvmE8ALpdOAC2WTQAslUwAK5RMACqTSwApkkoAKJFJACeQSQAnj0gAJo5HACWNRgAkjEYAI4tFACKKRAAgiUMAH4hDAB6HQgAdhkEAHIVAABuEPwAagz8AGYI+ABiBPQAXgDwAFn87ABR/OwATfjoAEn05ABF8OAAQezgAD3o3AA55NgANeDUADHc0AAt2NAAJdTMACHQyAAdzMQAGcjEABXEwAARwLwADby4AAm8tAAFuLQAAbCwAAGsrAABqKwAAaSoAAGcqAABmKQAAZSkAAGMoAABiKAAAYScAAGAnAABeJgAAXSYAAFwlAABaJQAAWSQAAFgjAABXIwAAVSIAAFQiAABTIQAAUSEAAFAgAABPIAAATh8AAEwfAABLHgAASh4AAEgdAABHHQAARhwAAEQbAA=='
builder.colorMaps['oranges'] = '//XrAP/16wD/9eoA//TpAP/06AD/8+cA//PmAP/y5QD/8uQA//HjAP/x4gD/8OEA//DhAP/v4AD/798A/+7eAP/u3QD/7dwA/+3bAP/t2gD/7NkA/+zYAP/r1wD/69cA/+rWAP/q1QD/6dQA/+nTAP/o0gD/6NEA/+fQAP/nzwD+5s4A/ubNAP7lzAD+5MoA/uTJAP7jxwD+4sYA/uLFAP7hwwD+4MIA/uDBAP7fvwD+3r4A/t28AP7duwD+3LoA/tu4AP7btwD+2rUA/tm0AP7ZswD+2LEA/tewAP7XrwD+1q0A/tWsAP7UqgD+1KkA/tOoAP7SpgD+0qUA/tGkAP3QogD9z6AA/c6fAP3NnQD9zJsA/cuZAP3KmAD9yZYA/ciUAP3HkwD9xpEA/cSPAP3DjQD9wowA/cGKAP3AiAD9v4YA/b6FAP29gwD9vIEA/buAAP26fgD9uXwA/bh6AP23eQD9tncA/bR1AP2zcwD9snIA/bFwAP2wbgD9r20A/a5rAP2taQD9rGgA/atnAP2qZQD9qWQA/ahiAP2nYQD9pl8A/aVeAP2kXAD9o1sA/aJZAP2hWAD9oFYA/Z9VAP2eUwD9nVIA/ZtQAP2aTwD9mU0A/ZhMAP2XSwD9lkkA/ZVIAP2URgD9k0UA/ZJDAP2RQgD9kEAA/Y8/AP2OPQD9jTwA/Yw7AP2LOQD8ijgA/Ig3APuHNQD7hjQA+4UzAPqEMgD6gzAA+oIvAPmBLgD5fywA+H4rAPh9KgD4fCkA93snAPd6JgD3eSUA9ncjAPZ2IgD1dSEA9XQgAPVzHgD0ch0A9HEcAPRwGgDzbhkA820YAPJsFwDyaxUA8moUAPFpEwDwaBMA8GcSAO9mEQDuZREA7WQQAO1jEADsYg8A62EPAOpgDgDpXg0A6V0NAOhcDADnWwwA5loLAOZZCwDlWAoA5FcKAONWCQDjVQgA4lQIAOFTBwDgUgcA4FEGAN9QBgDeTwUA3U4EAN1NBADcTAMA20sDANpKAgDaSQIA2EgCANdIAgDVRwIA00YCANJGAgDQRQIAz0UCAM1EAgDLRAIAykMCAMhCAgDHQgIAxUECAMNBAgDCQAIAwEACAL8/AwC9PgMAuz4DALo9AwC4PQMAtzwDALU8AwCzOwMAsjsDALA6AwCvOQMArTkDAKw4AwCqOAMAqDcDAKc3AwClNgQApDYEAKM1BACiNQQAoTQEAJ80BACeMwQAnTMEAJwyBACaMgQAmTEEAJgxBACXMAQAljAEAJQvBACTLwQAki8EAJEuBACPLgQAji0EAI0tBACMLAQAiywEAIkrBACIKwQAhyoEAIYqBACEKQQAgykEAIIoBACBKAQAfycEAA=='
builder.colorMaps['reds'] = '//XwAP/18AD/9O8A//TuAP/z7QD/8uwA//LrAP/x6gD/8OkA//DoAP/v5wD/7uYA/+7lAP/t5AD/7OMA/+ziAP/r4QD/6uAA/+rgAP/p3wD/6N4A/+jdAP/n3AD/5tsA/+baAP/l2QD/5NgA/+TXAP/j1gD/4tUA/+LUAP/h0wD+4NIA/t/RAP7ezwD+3c4A/tzMAP7bywD+2ckA/tjIAP7XxgD+1sQA/tXDAP7UwQD+0sAA/tG+AP7QvQD+z7sA/c66AP3NuAD9y7cA/cq1AP3JtAD9yLIA/cewAP3GrwD9xK0A/cOsAP3CqgD9wakA/cCnAP2/pgD9vqQA/byjAPy7oQD8uqAA/LmeAPy3nQD8tpsA/LWaAPyzmAD8spcA/LGVAPywlAD8rpIA/K2RAPysjwD8qo4A/KmMAPyoiwD8p4oA/KWIAPykhwD8o4UA/KGEAPygggD8n4EA/J5/APycfgD8m3wA/Jp7APyYeQD8l3gA/JZ2APyVdQD8k3MA/JJyAPyRcQD8kHAA/I5uAPyNbQD8jGwA/IpqAPyJaQD8iGgA/IdnAPyFZQD8hGQA/INjAPyCYgD8gGAA/H9fAPx+XgD8fV0A/HtbAPx6WgD8eVkA/HhYAPx2VgD8dVUA/HRUAPxzUwD8cVEA/HBQAPxvTwD8bk4A/GxMAPxrSwD7akoA+2hJAPtnSAD6ZUcA+mRGAPliRQD5YUQA+V9DAPheQgD4XEIA+FtBAPdaQAD3WD8A9lc+APZVPQD2VDwA9VI7APVROgD1TzkA9E44APRMNwDzSzYA80k1APNINADyRjMA8kUyAPJDMgDxQjEA8UAwAPA/LwDwPi4A8DwtAO87LADuOiwA7TkrAOs4KwDqNioA6TUqAOg0KQDnMykA5jIoAOUxKADjMCcA4i8nAOEuJwDgLSYA3ysmAN4qJQDdKSUA3CgkANonJADZJiMA2CUjANckIgDWIyIA1SIhANQgIQDTHyAA0R4gANAdHwDPHB8AzhsfAM0aHgDMGR4AyxgdAMkYHQDIGB0AxxcdAMYXHADFFxwAwxccAMIWHADBFhsAwBYbAL8VGwC9FRsAvBUaALsVGgC6FBoAuRQaALgUGQC2ExkAtRMZALQTGQCzExgAshIYALASGACvEhgArhIXAK0RFwCsERcAqhEXAKkQFgCoEBYApxAWAKYQFgCkDxUAog8VAKAOFQCeDhUAnA0UAJoNFACYDBQAlgwUAJQLEwCSCxMAkAoTAI4KEwCMCRIAiwkSAIkIEgCHCBIAhQgRAIMHEQCBBxEAfwYRAH0GEAB7BRAAeQUQAHcEEAB1BA8AcwMPAHEDDwBvAg8AbQIOAGsBDgBpAQ4AZwANAA=='
builder.colorMaps['spectral'] = 'ngFCAKEEQwCjBkQApQlEAKcLRQCpDUUAqxBGAK4SRgCwFUcAshdHALQZSAC2HEgAuB5JALshSQC9I0oAvyVKAMEoSwDDKksAxS1MAMcvTADKMU0AzDRNAM42TgDQOU4A0jtPANQ9TwDWP08A10FPANlDTgDaRU4A20dNANxJTQDdSkwA30xMAOBOSwDhUEsA4lJLAONUSgDlVkoA5ldJAOdZSQDoW0gA6l1IAOtfRwDsYUcA7WJGAO5kRgDwZkUA8WhFAPJqRADzbEQA9G1DAPVwRQD1c0YA9nVHAPZ4SAD2ekkA931LAPd/TAD3gk0A+IROAPiHTwD4ilAA+YxSAPmPUwD5kVQA+pRVAPqWVgD7mVcA+5tZAPueWgD8oFsA/KNcAPymXQD9qF8A/atgAP2tYQD+r2IA/rFkAP6zZgD+tWcA/rdpAP65awD+u2wA/r1uAP6/bwD+wXEA/sNzAP7FdAD+x3YA/sl4AP7LeQD+zXsA/s99AP7RfgD+04AA/tWCAP7XgwD+2YUA/tuHAP7diAD+34oA/uCLAP/ijgD/45AA/+SSAP/llAD/55YA/+iYAP/pmgD/6pwA/+ueAP/toAD/7qIA/++kAP/wpgD/8qgA//OqAP/0rAD/9a4A//awAP/4sgD/+bQA//q2AP/7uAD//LoA//68AP//vgD//78A/v+9AP3/vAD8/roA+/65APr9twD5/bYA+P20APf8swD2/LEA9fuvAPT7rgDz+6wA8vqrAPH6qQDw+agA7/mmAO75pQDt+KMA7PiiAOv3oADq958A6fedAOj2nADn9poA5/WZAOT1mQDi9JkA4POaAN3ymgDb8ZsA2fCbANbvnADU7pwA0u2dAM/snQDN654Ay+qeAMjpnwDG6J8AxOegAMHmoAC/5qAAveWhALvkoQC446IAtuKiALThowCx4KMAr9+kAK3epACq3aUAp9ylAKXbpQCi2qUAn9mlAJ3YpQCa16UAl9alAJXUpQCS06UAj9KlAIzRpQCK0KUAh8+lAITOpQCCzaUAf8ylAHzLpQB5yqUAd8mlAHTIpQBxx6UAb8alAGzFpQBpxKUAZsKlAGTApgBivqcAYLyoAF65qQBct6oAWrWrAFizrABWsK0AVK6uAFKsrwBQqbAATqexAEylsgBKo7MASKC0AEaetQBEnLUAQpq2AECXtwA+lbgAPJO5ADqQugA4jrsANoy8ADSKvQAzh70ANYW8ADeDuwA5gboAOn65ADx8uAA+ercAP3i2AEF2tABDc7MARXGyAEZvsQBIbbAASmqvAExorgBNZq0AT2SsAFFhqwBSX6oAVF2pAFZbqABYWKcAWVamAFtUpQBdUqQAXk+iAA=='
builder.colorMaps['coolwarm'] = 'O03BADxOwgA9UMQAP1LFAEBUxwBBVcgAQlfKAENZywBEW80ARlzOAEde0ABIYNEASWHSAEpj1ABMZdUATWfXAE5o2ABPatkAUWzbAFJt3ABTb90AVHHeAFZy3wBXdOEAWHbiAFl34wBbeeQAXHrlAF185gBefucAYH/oAGGB6QBig+sAZITrAGWG7ABmh+0AaInuAGmK7wBqjPAAbI7xAG2P8gBukfIAcJLzAHGU9ABylfUAdJb1AHWY9gB2mfcAeJv3AHmc+AB7nvkAfJ/5AH2h+gB/ovoAgKP7AIGl+wCDpvwAhKf8AIap/ACHqv0AiKv9AIqt/QCLrv4AjK/+AI6w/gCPsv4AkbP/AJK0/wCTtf8Albb/AJa4/wCYuf8Ambr/AJq7/wCcvP8Anb3/AJ6+/wCgv/8AocD/AKPB/wCkwv8ApcP/AKfE/gCoxf4Aqcb+AKvH/gCsyP0Arcn9AK/K/QCwy/wAscz8ALPM/AC0zfsAtc77ALfP+gC40PoAudD5ALrR+QC80vgAvdL3AL7T9wC/1PYAwdT2AMLV9QDD1fQAxNbzAMbW8wDH1/IAyNfxAMnY8ADK2O8Ay9nvAM3Z7gDO2u0Az9rsANDa6wDR2+oA0tvpANPb6ADU3OcA1tzmANfc5QDY3OMA2dziANrd4QDb3eAA3N3fAN3d3gDe3dwA39zbAODc2gDh29gA4tvXAOPa1QDk2tQA5dnSAObZ0QDn2NAA6NfOAOjXzQDp1ssA6tXKAOvUyADs1McA7dPFAO3SxADu0cIA7tDBAO/QvwDwz70A8M68APHNugDyzLkA8su3APPKtgDzybQA88izAPTHsQD0xrAA9cWuAPXErAD1w6sA9sKpAPbBqAD2wKYA976lAPe9owD3vKEA97ugAPe6ngD3uJ0A97ebAPi2mQD4tJgA+LOWAPiylQD4sZMA+K+SAPiukAD3rI4A96uNAPeqiwD3qIoA96eIAPelhwD3pIUA9qKDAPahggD2n4AA9Z5/APWcfQD1m3wA9Jl6APSXeQD0lncA85R2APOSdADykXMA8o9xAPGOcADxjG4A8IptAO+IawDvh2oA7oVoAO2DZwDtgWUA7IBkAOt+YgDrfGEA6npfAOl4XgDodl0A53VbAOdzWgDmcVgA5W9XAORtVQDja1QA4mlTAOFnUQDgZVAA32NPAN5hTQDdX0wA3F1LANtbSQDaWUgA2VdHANhVRQDXU0QA1VBDANROQQDTTEAA0ko/ANBHPgDPRT0AzkM7AM1AOgDLPjkAyjw4AMk5NgDHNjUAxjM0AMUxMwDDLjIAwisxAMApLwC/JC4AvSAtALwbLAC6FysAuRIqALcOKQC2CSgAtAQnAA=='
builder.colorMaps['bwr'] = 'AAD/AAIC/wAEBP8ABgb/AAgI/wAKCv8ADAz/AA4O/wAQEP8AEhL/ABQU/wAWFv8AGBj/ABoa/wAcHP8AHh7/ACAg/wAiIv8AJCT/ACYm/wAoKP8AKir/ACws/wAuLv8AMDD/ADIy/wA0NP8ANjb/ADg4/wA6Ov8APDz/AD4+/wBAQP8AQkL/AERE/wBGRv8ASEj/AEpK/wBMTP8ATk7/AFBQ/wBSUv8AVFT/AFZW/wBYWP8AWlr/AFxc/wBeXv8AYGD/AGJi/wBkZP8AZmb/AGho/wBqav8AbGz/AG5u/wBwcP8AcnL/AHR0/wB2dv8AeHj/AHp6/wB8fP8Afn7/AICA/wCCgv8AhIT/AIaG/wCIiP8Aior/AIyM/wCOjv8AkJD/AJKS/wCUlP8Alpb/AJiY/wCamv8AnJz/AJ6e/wCgoP8AoqL/AKSk/wCmpv8AqKj/AKqq/wCsrP8Arq7/ALCw/wCysv8AtLT/ALa2/wC4uP8Aurr/ALy8/wC+vv8AwMD/AMLC/wDExP8Axsb/AMjI/wDKyv8AzMz/AM7O/wDQ0P8A0tL/ANTU/wDW1v8A2Nj/ANra/wDc3P8A3t7/AODg/wDi4v8A5OT/AObm/wDo6P8A6ur/AOzs/wDu7v8A8PD/APLy/wD09P8A9vb/APj4/wD6+v8A/Pz/AP7+/wD//v4A//z8AP/6+gD/+PgA//f3AP/09AD/8vIA//DwAP/u7gD/7OwA/+rqAP/o6AD/5uYA/+TkAP/i4gD/4OAA/97eAP/c3AD/2toA/9jYAP/X1wD/1NQA/9LSAP/Q0AD/zs4A/8zMAP/KygD/yMgA/8bGAP/ExAD/wsIA/8DAAP++vgD/vLwA/7u7AP+4uAD/t7cA/7S0AP+ysgD/sLAA/66uAP+srAD/q6sA/6ioAP+mpgD/pKQA/6KiAP+goAD/np4A/5ycAP+bmwD/mJgA/5eXAP+UlAD/kpIA/5CQAP+OjgD/jIwA/4uLAP+IiAD/hoYA/4SEAP+CggD/gIAA/35+AP99fQD/enoA/3h4AP93dwD/dXUA/3JyAP9wcAD/bm4A/21tAP9qagD/aGgA/2ZmAP9lZQD/YmIA/2BgAP9eXgD/XV0A/1paAP9YWAD/V1cA/1VVAP9SUgD/UFAA/05OAP9NTQD/SkoA/0hIAP9GRgD/RUUA/0JCAP9AQAD/Pz8A/z09AP86OgD/ODgA/zc3AP81NQD/MjIA/zAwAP8vLwD/LS0A/yoqAP8oKAD/JycA/yUlAP8iIgD/ICAA/x8fAP8dHQD/GhoA/xgYAP8XFwD/FRUA/xISAP8QEAD/Dw8A/w0NAP8KCgD/CAgA/wcHAP8FBQD/AgIA/wAAAA=='
builder.colorMaps['seismic'] = 'AABNAAAAUAAAAFMAAABVAAAAWAAAAFsAAABeAAAAYQAAAGMAAABmAAAAaQAAAGwAAABvAAAAcQAAAHQAAAB3AAAAegAAAH0AAAB/AAAAggAAAIUAAACIAAAAiwAAAI0AAACQAAAAkwAAAJYAAACZAAAAmwAAAJ4AAAChAAAApAAAAKcAAACpAAAArAAAAK8AAACyAAAAtQAAALcAAAC6AAAAvQAAAMAAAADDAAAAxQAAAMgAAADLAAAAzgAAANEAAADTAAAA1gAAANkAAADcAAAA3wAAAOEAAADkAAAA5wAAAOoAAADtAAAA7wAAAPIAAAD1AAAA+AAAAPsAAAD9AAEB/wAFBf8ACQn/AA0N/wAREf8AFRX/ABkZ/wAdHf8AISH/ACUl/wApKf8ALS3/ADEx/wA1Nf8AOTn/AD09/wBBQf8ARUX/AElJ/wBNTf8AUVH/AFVV/wBZWf8AXV3/AGFh/wBlZf8AaWn/AG1t/wBxcf8AdXX/AHl5/wB9ff8AgYH/AIWF/wCJif8AjY3/AJGR/wCVlf8AmZn/AJ2d/wChof8ApaX/AKmp/wCtrf8AsbH/ALW1/wC5uf8Avb3/AMHB/wDFxf8Aycn/AM3N/wDR0f8A1dX/ANnZ/wDd3f8A4eH/AOXl/wDp6f8A7e3/APHx/wD19f8A+fn/AP39/wD//f0A//n5AP/19QD/8fEA/+7uAP/p6QD/5eUA/+HhAP/d3QD/2dkA/9XVAP/R0QD/zc0A/8nJAP/FxQD/wcEA/729AP+5uQD/tbUA/7GxAP+urgD/qakA/6WlAP+hoQD/nZ0A/5mZAP+VlQD/kZEA/42NAP+JiQD/hYUA/4GBAP9+fgD/eXkA/3Z2AP9xcQD/bm4A/2lpAP9mZgD/YWEA/15eAP9ZWQD/VlYA/1FRAP9OTgD/SUkA/0ZGAP9BQQD/Pj4A/zk5AP82NgD/MTEA/y4uAP8pKQD/JiYA/yEhAP8eHgD/GRkA/xYWAP8REQD/Dg4A/wkJAP8GBgD/AQEA/gAAAPwAAAD6AAAA+AAAAPYAAAD0AAAA8gAAAPAAAADuAAAA7AAAAOoAAADoAAAA5gAAAOQAAADiAAAA4AAAAN4AAADcAAAA2gAAANgAAADWAAAA1AAAANIAAADQAAAAzgAAAMwAAADKAAAAyAAAAMYAAADEAAAAwgAAAMAAAAC+AAAAvAAAALoAAAC4AAAAtgAAALQAAACyAAAAsAAAAK4AAACsAAAAqgAAAKgAAACmAAAApAAAAKIAAACgAAAAngAAAJwAAACaAAAAmAAAAJYAAACUAAAAkgAAAJAAAACOAAAAjAAAAIoAAACIAAAAhgAAAIQAAACCAAAAgAAAAA=='
builder.colorMaps['twilight'] = '4tnjAOHa4wDg2uIA39rhAN7a4QDc2eAA2tnfANnY3gDX190A1dfcANPW2wDQ1doAztPZAMvS2ADI0dcAxtDVAMPO1ADAzdMAvcvSALrK0QC3yNAAtMfPALHFzgCuxM0Aq8LMAKjBywClv8sAor3KAJ+8yQCcuskAmbjIAJe2xwCUtccAk7THAI+xxgCMr8YAiq3FAImsxQCFqsQAg6jEAIGmxACApcMAfaLDAHugwwB5nsIAeJ3CAHWbwgB0mcEAcpfBAHGWwQBvk8AAbpHAAGyPwABsjsAAaoq/AGmIvwBohr4AZ4W+AGaCvgBlgL0AZX69AGR9vABjebwAY3e7AGJ1uwBic7oAYnK6AGFuuQBhbLgAYGq3AGBotwBgZbYAYGO1AGBhtABgX7QAX1yyAF9asQBfV7AAX1WvAF9SrgBfUK0AX06rAF9MqwBeSagAXkanAF5EpQBeQaQAXj+iAF09oABdOp4AXTmdAFw1mgBcM5gAWzGWAFsukwBaLJEAWiqOAFkojABYJooAVyOGAFYigwBVIIAAVB59AFMceQBRG3YAUBpzAE8ZcQBNF2wASxZoAEoWZQBIFWEARhReAEUTWwBDE1gAQhNWAD8SUgA+Ek8APBJMADsRSQA5EUcAOBFEADcRQgA2EUEANBI+ADMSPAAzEjsAMRM5ADAUOAAwFDcAMhM3ADMTOAA0EjgANRI4ADcSOQA4EjoAOhI6ADwSOwA+EjwAQBI9AEISPgBEEz8ARhNAAEgTQQBLFEIATRRDAFAVRABSFUUAVRZGAFYWRwBaF0gAXRdJAF8YSgBiGUsAZBlMAGcaTQBqG00AbBtOAG8cTwByHU8AdB5PAHcfUAB5IFAAfCFQAH4iUQCAI1EAgyVRAIUmUQCIKFEAiilRAIwrUQCOLVEAkS5RAJMwUACVMlAAlzNQAJk1UACbN1AAnDlQAJ47UACgPVAAoT5QAKNBUAClQ1AAp0VQAKhHUACqSlEAq0xRAK1OUQCuUFEAsFJSALFVUgCzV1MAtFlTALVbVAC2XlQAt2BVALhhVQC6ZVcAu2dYALxpWAC9bFoAvm5bAL9xXADAc10AwXVeAMF4YADCemEAw31jAMR/ZQDEgmcAxYRpAMaHawDGiGwAx4xvAMiOcQDIkHMAyZN2AMmVeQDKmHsAypp+AMudgQDLn4QAzKKGAM2kigDNpo0AzqmQAM6rkwDPrZYAz6+YANCynQDRtKAA0rekANO5pwDUu6oA1L2uANW/sQDWwbUA18O4ANjFvADZx78A2snCANvLxQDczckA3M/MAN3PzQDe0tEA39PUAN/U1gDg1tgA4NfaAOHX3ADh2N4A4tnfAOLZ4ADi2eIA4tniAA=='
builder.colorMaps['hsv'] = '/wAAAP8GAAD/DAAA/xIAAP8YAAD/HgAA/yQAAP8qAAD/MAAA/zYAAP88AAD/QQAA/0cAAP9NAAD/UwAA/1kAAP9fAAD/ZQAA/2sAAP9xAAD/dwAA/30AAP+CAAD/iAAA/44AAP+UAAD/mgAA/6AAAP+mAAD/rAAA/7IAAP+4AAD/vgAA/8MAAP/JAAD/zwAA/9UAAP/bAAD/4QAA/+cAAP/tAAD+8gAA/PYAAPv6AAD5/QAA9f8AAO//AADp/wAA4/8AAN3/AADX/wAA0f8AAMv/AADF/wAAwP8AALr/AAC0/wAArv8AAKj/AACi/wAAnP8AAJb/AACQ/wAAiv8AAIT/AAB//wAAef8AAHP/AABt/wAAZ/8AAGH/AABb/wAAVf8AAE//AABJ/wAARP8AAD7/AAA4/wAAMv8AACz/AAAm/wAAIP8AABr/AAAU/wAADv8AAAj/AQAG/wQABf8IAAP/DAAB/xAAAP8WAAD/HAAA/yIAAP8oAAD/LgAA/zQAAP86AAD/PwAA/0UAAP9LAAD/UQAA/1cAAP9dAAD/YwAA/2kAAP9vAAD/dQAA/3oAAP+AAAD/hgAA/4wAAP+SAAD/mAAA/54AAP+kAAD/qgAA/7AAAP+2AAD/uwAA/8EAAP/HAAD/zQAA/9MAAP/ZAAD/3wAA/+UAAP/rAAD/8QAA//YAAP/8AAD9/wAA9/8AAPH/AADr/wAA5f8AAN//AADZ/wAA0/8AAM3/AADI/wAAwv8AALz/AAC2/wAAsP8AAKr/AACk/wAAnv8AAJj/AACS/wAAjP8AAIf/AACB/wAAe/8AAHX/AABv/wAAaf8AAGP/AABd/wAAV/8AAFH/AABM/wAARv8AAED/AAA6/wAANP8AAC7/AAAo/wAAIv8AABz/AAAW/wAAEP8AAg3/AAQJ/wAGBf8ACAH/AA4A/wAUAP8AGgD/ACAA/wAmAP8ALAD/ADIA/wA3AP8APQD/AEMA/wBJAP8ATwD/AFUA/wBbAP8AYQD/AGcA/wBtAP8AcgD/AHgA/wB+AP8AhAD/AIoA/wCQAP8AlgD/AJwA/wCiAP8AqAD/AK4A/wCzAP8AuQD/AL8A/wDFAP8AywD/ANEA/wDXAP8A3QD/AOMA/wDpAP8A7wD/APQA/wD4AP4A+gD6APwA9gD+APIA/wDtAP8A5wD/AOEA/wDbAP8A1QD/ANAA/wDKAP8AxAD/AL4A/wC4AP8AsgD/AKwA/wCmAP8AoAD/AJoA/wCUAP8AjwD/AIkA/wCDAP8AfQD/AHcA/wBxAP8AawD/AGUA/wBfAP8AWQD/AFMA/wBOAP8ASAD/AEIA/wA8AP8ANgD/ADAA/wAqAP8AJAD/AB4A/wAYAA=='

builder.colorMapNodeMap = {}
builder.colorMapNodeMap[ll.ChannelType.Uint8] = 'lluvia/viz/colormap/ColorMap_uint'
builder.colorMapNodeMap[ll.ChannelType.Uint16] = 'lluvia/viz/colormap/ColorMap_uint'
builder.colorMapNodeMap[ll.ChannelType.Uint32] = 'lluvia/viz/colormap/ColorMap_uint'
builder.colorMapNodeMap[ll.ChannelType.Int8] = 'lluvia/viz/colormap/ColorMap_int'
builder.colorMapNodeMap[ll.ChannelType.Int16] = 'lluvia/viz/colormap/ColorMap_int'
builder.colorMapNodeMap[ll.ChannelType.Int32] = 'lluvia/viz/colormap/ColorMap_int'
builder.colorMapNodeMap[ll.ChannelType.Float16] = 'lluvia/viz/colormap/ColorMap_float'
builder.colorMapNodeMap[ll.ChannelType.Float32] = 'lluvia/viz/colormap/ColorMap_float'

function builder.newDescriptor() 
    
    local desc = ll.ContainerNodeDescriptor.new()

    desc.builderName = builder.name

    local in_image = ll.PortDescriptor.new(0, 'in_image', ll.PortDirection.In, ll.PortType.ImageView)
    in_image:checkImageChannelCountIs(ll.ChannelCount.C1)

    -- add support for all channel types
    in_image:checkImageChannelTypeIsAnyOf({ll.ChannelType.Uint8, ll.ChannelType.Int8, ll.ChannelType.Float16, ll.ChannelType.Float32})

    desc:addPort(in_image)
    desc:addPort(ll.PortDescriptor.new(1, 'out_rgba', ll.PortDirection.Out, ll.PortType.ImageView))

    desc:setParameter('colormap', 'viridis')
    desc:setParameter('min_value', 0.0)
    desc:setParameter('max_value', 1.0)
    desc:setParameter('alpha', 0.0)
    desc:setParameter('reverse', 0.0)

    return desc
end

function builder.onNodeInit(node)
    
    local in_image = node:getPort('in_image')

    local colormap = node:getParameter('colormap')
    local min_value = node:getParameter('min_value')
    local max_value = node:getParameter('max_value')
    local alpha = node:getParameter('alpha')
    local reverse = node:getParameter('reverse')
    ll.logd(node.descriptor.builderName, string.format('colormap: %s, min_value: %f, max_value: %f, alpha: %f', colormap, min_value, max_value, alpha))

    -- Create a Lua array containing the RGBA values for the Viridis map. Could encode using base 64
    -- Create a ll.Buffer and transfer the RGBA content to it. Might need to support buffer.map here
    -- Copy the a RGBA ll.Image with the buffer's content
    -- Create a normalized ll.ImageView using linear interpolation
    -- Use the image view in the compute shader

    -- Need to check if the color map exists
    local encodedColorMap = builder.colorMaps[colormap]
    if encodedColorMap == nil then
        error(node.descriptor.builderName .. ': color map not found: ' .. color_map)
    end

    -- should map to std::vector<uint8_t>
    local decodedColorMap = ll.fromBase64(encodedColorMap)
    local bufferSize = decodedColorMap:size()
    ll.logd(node.descriptor.builderName, string.format('bufferSize: %d', bufferSize))

    local hostMemory = ll.getHostMemory()
    local stagingBuffer = hostMemory:createBuffer(bufferSize)
    stagingBuffer:mapAndSetFromVectorUint8(decodedColorMap)

    local textureMemory = ll.getDeviceMemory()
    local colorMapImage = textureMemory:createImage(
        ll.ImageDescriptor.new(1, 1, 256, ll.ChannelCount.C4, ll.ChannelType.Uint8),
        ll.ImageLayout.General,
        ll.ImageUsageFlagBits.Storage | ll.ImageUsageFlagBits.Sampled | ll.ImageUsageFlagBits.TransferDst)

    local colorMapImageView = colorMapImage:createImageView(
        ll.ImageViewDescriptor.new(ll.ImageAddressMode.MirroredRepeat, ll.ImageFilterMode.Linear, true, true))

    local cmdBuffer = ll.createCommandBuffer()
    cmdBuffer:begin()
    cmdBuffer:changeImageLayout(colorMapImage, ll.ImageLayout.TransferDstOptimal)
    cmdBuffer:copyBufferToImage(stagingBuffer, colorMapImage)
    cmdBuffer:changeImageLayout(colorMapImage, ll.ImageLayout.ShaderReadOnlyOptimal)
    cmdBuffer:ends()

    ll.runCommandBuffer(cmdBuffer)

    local colorMapNodePath = builder.colorMapNodeMap[in_image.channelType]
    if colorMapNodePath == nil then
        error(node.descriptor.builderName .. ': unsupported channel type: ' .. in_image.channelType)
    end

    local colorMapNode = ll.createComputeNode(colorMapNodePath)
    node:bindNode('ColorMap', colorMapNode)

    colorMapNode:setParameter('min_value', min_value)
    colorMapNode:setParameter('max_value', max_value)
    colorMapNode:setParameter('alpha', alpha)
    colorMapNode:setParameter('reverse', reverse)

    colorMapNode:bind('in_image', in_image)
    colorMapNode:bind('in_colormap', colorMapImageView)
    colorMapNode:init()

    node:bind('out_rgba', colorMapNode:getPort('out_rgba'))
end

function builder.onNodeRecord(node, cmdBuffer)

    ll.logd(node.descriptor.builderName, 'onNodeRecord')

    local colorMapNode = node:getNode('ColorMap')
    cmdBuffer:run(colorMapNode)
    
    ll.logd(node.descriptor.builderName, 'onNodeRecord: finish')
end

ll.registerNodeBuilder(builder)
