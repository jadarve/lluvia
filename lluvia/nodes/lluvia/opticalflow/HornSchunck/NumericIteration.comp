#version 450

#include <lluvia/core.glsl>

layout(binding = 0, rgba32f) uniform image2D in_image_params;
layout(binding = 1, rg32f) uniform image2D in_flow;

layout(binding = 2, rg32f) uniform image2D out_flow;

void main()
{

    const ivec2 coords = LL_GLOBAL_COORDS_2D;
    const ivec2 imgSize = imageSize(out_flow);

    if (coords.x > imgSize.x || coords.y > imgSize.y) {
        return;
    }

    ///////////////////////////////////////////////////////
    // Read flow values in the 3x3 neighborhood
    ///////////////////////////////////////////////////////

    const bool leftBorder = coords.x == 0;
    const bool rightBorder = coords.x == imgSize.x - 1;
    const bool topBorder = coords.y == 0;
    const bool bottomBorder = coords.y == imgSize.y - 1;

    // central pixel in the 3x3 window
    const vec2 flow_11 = imageLoad(in_flow, coords).xy;

    // row 0
    const vec2 flow_00 = leftBorder || topBorder ? flow_11 : imageLoad(in_flow, coords + ivec2(-1, -1)).xy;
    const vec2 flow_01 = topBorder ? flow_11 : imageLoad(in_flow, coords + ivec2(0, -1)).xy;
    const vec2 flow_02 = rightBorder || topBorder ? flow_11 : imageLoad(in_flow, coords + ivec2(+1, -1)).xy;

    // row 1
    const vec2 flow_10 = leftBorder ? flow_11 : imageLoad(in_flow, coords + ivec2(-1, 0)).xy;
    const vec2 flow_12 = rightBorder ? flow_11 : imageLoad(in_flow, coords + ivec2(+1, 0)).xy;

    // row 2
    const vec2 flow_20 = leftBorder || bottomBorder ? flow_11 : imageLoad(in_flow, coords + ivec2(-1, +1)).xy;
    const vec2 flow_21 = bottomBorder ? flow_11 : imageLoad(in_flow, coords + ivec2(0, +1)).xy;
    const vec2 flow_22 = rightBorder || bottomBorder ? flow_11 : imageLoad(in_flow, coords + ivec2(+1, +1)).xy;

    ///////////////////////////////////////////////////////
    // Laplacian flow average
    //
    // Smooth mask
    // [[ 1/12  1/6   1/12]
    //  [ 1/6   0     1/6 ]
    //  [ 1/12  1/6   1/12]]
    ///////////////////////////////////////////////////////
    const vec2 flowAvg = 0.0833 * (flow_00 + flow_02 + flow_20 + flow_22)
        + 0.1667 * (flow_01 + flow_10 + flow_12 + flow_21);

    ///////////////////////////////////////////////////////
    // Read image parameters
    ///////////////////////////////////////////////////////
    const vec4 imgParams = imageLoad(in_image_params, coords);

    const vec2 imgGradient = imgParams.xy;
    const float imgTimeDifference = imgParams.z;
    const float regularization = imgParams.w;

    const float gain = (dot(imgGradient, flowAvg) + imgTimeDifference) * regularization;

    const vec2 flow = flowAvg - imgGradient * gain;

    imageStore(out_flow, coords, vec4(flow.x, flow.y, 0, 0));
}
