#version 450

#include <lluvia/core.glsl>

layout(binding = 0, r8ui) uniform uimage2D in_gray;
layout(binding = 1, r32f) uniform image2D in_gray_old;
layout(binding = 2, r32f) uniform image2D out_gray;
layout(binding = 3, rgba32f) uniform image2D out_image_params;

layout(push_constant) uniform const_0 {
    float alpha_square;
} params;

void main() {

    const float alpha_square = params.alpha_square;

    // this coordinates are relative to out_gradient size
    const ivec2 coords  = LL_GLOBAL_COORDS_2D;
    const ivec2 imgSize = imageSize(out_image_params);

    if (coords.x > imgSize.x || coords.y > imgSize.y) {
        return;
    }
    
    ///////////////////////////////////////////////////////
    // Read image values in the 3x3 neighborhood
    ///////////////////////////////////////////////////////

    const bool rightBorder  = coords.x == imgSize.x - 1;
    const bool bottomBorder = coords.y == imgSize.y -1;

    // current image
    const float img_00 = imageLoad(in_gray, coords).r / 255.0;
    const float img_01 = bottomBorder?                img_00 : imageLoad(in_gray, coords + ivec2( 0, +1)).r / 255.0;

    const float img_10 = rightBorder?                 img_00 : imageLoad(in_gray, coords + ivec2(+1, +0)).r / 255.0;
    const float img_11 = rightBorder || bottomBorder? img_00 : imageLoad(in_gray, coords + ivec2(+1, +1)).r / 255.0;

    // old image
    const float img_old_00 = imageLoad(in_gray_old, coords).r;
    const float img_old_01 = bottomBorder?                img_old_00 : imageLoad(in_gray_old, coords + ivec2( 0, +1)).r;

    const float img_old_10 = rightBorder?                 img_old_00 : imageLoad(in_gray_old, coords + ivec2(+1, +0)).r;
    const float img_old_11 = rightBorder || bottomBorder? img_old_00 : imageLoad(in_gray_old, coords + ivec2(+1, +1)).r;
    

    ///////////////////////////////////////////////////////
    // Normalized image gradient and smoothed output
    ///////////////////////////////////////////////////////

    // gradient values are normalized to [-1, 1]
    const float grad_x = 0.25 * ( (img_10 - img_00) + (img_11 - img_01) + (img_old_10 - img_old_00) + (img_old_11 - img_old_01));
    const float grad_y = 0.25 * ( (img_01 - img_00) + (img_11 - img_10) + (img_old_01 - img_old_00) + (img_old_11 - img_old_10));

    // filtered image is normalized to [0, 1]
    // const float imgFiltered = 0.25 * (img_00 + img_01 + img_10 + img_11);

    // Temporal difference
    const float imgTimeDifference = 0.25 * (img_00 + img_01 + img_10 + img_11 - img_old_00 - img_old_01 - img_old_10 - img_old_11);

    // Regularization
    const float regularization = 1.0 / (alpha_square + grad_x*grad_x + grad_y*grad_y);

    // normalized image intensity in range [0, 1] and gradients in range [-1, 1]
    const vec4 outputValue = vec4(grad_x, grad_y, imgTimeDifference, regularization);

    imageStore(out_image_params, coords, outputValue);
    imageStore(out_gray, coords, vec4(img_00, 0, 0, 0));
}
