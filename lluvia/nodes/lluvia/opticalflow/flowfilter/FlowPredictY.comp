#version 450

#include <lluvia/core.glsl>

layout(binding = 0, rg32f) uniform image2D in_flow;
layout(binding = 1, rg32f) uniform image2D out_flow;

layout(push_constant) uniform const_0 {
    float dt;
} params;

void main() {

    const ivec2 coords  = LL_GLOBAL_COORDS_2D;
    const ivec2 imgSize = imageSize(in_flow);

    const float dt = params.dt;

    if (coords.x > imgSize.x || coords.y > imgSize.y) {
        return;
    }

    const bool topBorder = coords.y == 0;
    const bool bottomBorder = coords.y == imgSize.y - 1;

    // flow values around pixel in X direction
    const vec2 flow_0 = imageLoad(in_flow, coords).xy;
    const vec2 flow_m = topBorder  ? flow_0 : imageLoad(in_flow, coords + ivec2(0, -1)).xy;
    const vec2 flow_p = bottomBorder ? flow_0 : imageLoad(in_flow, coords + ivec2(0, +1)).xy;

    // central difference of V_abs
    const float Vabs_central = abs(flow_p.y) - abs(flow_m.y);

    // dominant flow
    const float Vd = Vabs_central > 0.0f? flow_p.y : flow_m.y;

    // forward and backward flow differences
    const vec2 diff_p = flow_p - flow_0;
    const vec2 diff_m = flow_0 - flow_m;

    // upstream difference
    const vec2 diff_upstream = Vd >= 0.0f? diff_m : diff_p;

    // propagation
    vec2 flowPropV = flow_0 - dt * Vd * diff_upstream;

    //#################################
    // BORDER REMOVAL
    //#################################
    const uint border = 2; // FIXME: parameter
    const bool inRange = (coords.x >= border && coords.x < imgSize.x - border) &&
                         (coords.y >= border && coords.y < imgSize.y - border);

    // if the pixel coordinate lies on the image border,
    // take the original value of flow (flow_0) as the propagated flow
    flowPropV = inRange? flowPropV : flow_0;

    //#################################
    // PACK RESULTS
    //#################################
    imageStore(out_flow, coords, vec4(flowPropV.x, flowPropV.y, 0, 0));
}
