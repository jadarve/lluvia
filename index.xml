<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lluvia â€“ Lluvia</title><link>/</link><description>Recent content on Lluvia</description><generator>Hugo -- gohugo.io</generator><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Raspberry Pi 4 build</title><link>/blog/2022/11/28/raspberry-pi-4-build/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/2022/11/28/raspberry-pi-4-build/</guid><description>
&lt;img src="/blog/2022/11/28/raspberry-pi-4-build/featured_optical-flow_hu8366e8cdc6a2eb44e74a1b676d82daf2_216085_640x0_resize_catmullrom_3.png" width="640" height="275"/>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The Raspberry Pi 4 project announced back in &lt;a href="https://www.raspberrypi.com/news/vulkan-update-were-conformant/">November 2020&lt;/a> that the Vulkan 1.0 conformance tests successfully passed for its GPU driver. More recently in &lt;a href="https://www.raspberrypi.com/news/vulkan-update-version-1-2-conformance-for-raspberry-pi-4/">August 2022&lt;/a>, Vulkan 1.2 conformance testing has been completed.&lt;/p>
&lt;p>The conformance tests are a large set of tests run against a driver implementation to see if it conforms with the Vulkan specification. This is essential to maintain the Vulkan API portable across platforms and GPU vendors.&lt;/p>
&lt;p>In addition, LunarG announced &lt;a href="https://www.linkedin.com/posts/lunarg-inc-_lunargs-vulkan-sdk-for-linux-now-builds-activity-6968566164138459136-Dw4Y?utm_source=share&amp;amp;utm_medium=member_desktop">support of the Vulkan SDK on the Raspberry Pi 4&lt;/a>. With this, the two most important requirements to build Lluvia on the RPi4 became available.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Build instructions&lt;/h4>
&lt;p>The build instructions are available in the &lt;a href="/docs/gettingstarted/installation/raspberry_pi_4/">Getting started page&lt;/a>. They can be summarized as:&lt;/p>
&lt;ul>
&lt;li>Prepare the operating system.&lt;/li>
&lt;li>Build the Vulkan SDK following the &lt;a href="https://vulkan.lunarg.com/doc/sdk/1.3.224.1/linux/getting_started.html">official documentation&lt;/a>.&lt;/li>
&lt;li>Build and install OpenCV (for running demos).&lt;/li>
&lt;li>Install Bazel.&lt;/li>
&lt;li>Build and install Lluvia.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="optical-flow-demo">Optical flow demo&lt;/h2>
&lt;p>There is a new demo shipped with the Lluvia source code to run pipelines with images captured from a camera. Currently, the demo uses &lt;a href="https://docs.opencv.org/4.5.5/d8/dfe/classcv_1_1VideoCapture.html">OpenCV VideoCapture class&lt;/a> to capture images from the Raspberry camera module.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/a3Cf4hbixNs" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>The demo app, which can be run from the repository root folder as&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>./samples/webcam/webcam.py --width&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#099">320&lt;/span> --height&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#099">240&lt;/span> &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> ./samples/webcam/scripts/horn_schunck.lua webcam/HornSchunck
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>configures the camera to capture images at &lt;code>320x240&lt;/code> resolution and runs the &lt;code>webcam/HornSchunck&lt;/code> container node defined in the &lt;code>horn_schunck.lua&lt;/code> script. The container node creates the pipeline illustrated below:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
skinparam linetype ortho
state BRGA2Gray
state HS as &amp;#34;HornSchunck&amp;#34;
state Flow2RGBA
state RGBA2BGRA
BRGA2Gray -down-&amp;gt; HS: in_gray
HS -down-&amp;gt; Flow2RGBA: in_flow
Flow2RGBA -down-&amp;gt; RGBA2BGRA: out_rgba
@enduml
&lt;/code>&lt;/pre>&lt;p>with the &lt;a href="/nodes/lluvia/opticalflow/hornschunck/hornschunck/">&lt;strong>&lt;code>HornSchunck&lt;/code>&lt;/strong>&lt;/a> node containing the algorithm implementation as discussed in a &lt;a href="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/">previous article&lt;/a>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">OpenCV BGR color ordering&lt;/h4>
By default, OpenCV used &lt;strong>BGRA&lt;/strong> channel ordering for color images. On the other hand, Lluvia uses &lt;strong>RGBA&lt;/strong> ordering to store color images. The last node in the demo pipeline converts to the color order OpenCV expects to render into the screen.
&lt;/div>
&lt;h2 id="discussion">Discussion&lt;/h2>
&lt;p>This post introduced the instructions for building Lluvia on the Raspberry Pi 4. A new demo application for running pipelines with images captured from the Pi&amp;rsquo;s camera module is also presented.&lt;/p>
&lt;p>As of now, Lluvia is supported in four platforms:&lt;/p>
&lt;ul>
&lt;li>Linux x86_64.&lt;/li>
&lt;li>Windows.&lt;/li>
&lt;li>Android through the &lt;a href="/blog/2022/11/08/android-integration-using-mediapipe/">mediapipe integration&lt;/a>.&lt;/li>
&lt;li>Raspberry Pi 4.&lt;/li>
&lt;/ul>
&lt;p>Future work can include support for other platforms such as:&lt;/p>
&lt;ul>
&lt;li>Nvidia Jetson hardware.&lt;/li>
&lt;li>MacOS and iOS.&lt;/li>
&lt;/ul>
&lt;p>With these many platforms, an interesting topic for future work is running benchmarks across all of them for assessing the runtime performance of different computer vision algorithms.&lt;/p></description></item><item><title>Blog: Android integration using mediapipe</title><link>/blog/2022/11/08/android-integration-using-mediapipe/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/2022/11/08/android-integration-using-mediapipe/</guid><description>
&lt;img src="/blog/2022/11/08/android-integration-using-mediapipe/featured_mobile_graph_hu21c9390c7cfe259837a9a1e4e6d2e48a_20271_640x0_resize_catmullrom_3.png" width="640" height="536"/>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The &lt;a href="/blog/2022/10/08/mediapipe-integration/">previous post on mediapipe integration&lt;/a> explored how to integrate Lluvia with Mediapipe to create complex Computer Vision pipelines leveraging mediapipe&amp;rsquo;s integration with other frameworks such as OpenCV and Tensorflow. This post expands this integration to run Lluvia on Android systems.&lt;/p>
&lt;p>The video below shows the &lt;a href="https://doi.org/10.1109/LRA.2016.2532928">Optical Flow Filter algorithm&lt;/a> running on a Samsung Galaxy S22+ phone.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/wLLmh0e9J0Y" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="graph-for-mobile-applications">Graph for mobile applications&lt;/h2>
&lt;p>The figure below illustrates the pipeline used on Android for running the &lt;strong>&lt;code>LluviaCalculator&lt;/code>&lt;/strong>. First, a &lt;code>FlowLimiter&lt;/code> calculator receives the images from the &lt;code>input_stream&lt;/code>. This calculator controls the rate at which packets are sent downstream; it receives an additional input from the last calculator, &lt;code>ImageFrameToGpuBuffer&lt;/code>, that indicates processing has been completed and that a new packet can be received.&lt;/p>
&lt;p>The &lt;code>GpuBufferToImageFrame&lt;/code> and &lt;code>ImageFrameToGpuBuffer&lt;/code> calculators convert packets from &lt;code>GpuBuffer&lt;/code> to &lt;code>ImageFrame&lt;/code> and vice-versa. They are needed for two reasons:&lt;/p>
&lt;ol>
&lt;li>On Android, the &lt;code>input_stream&lt;/code> and &lt;code>output_stream&lt;/code> ports of the pipeline expect &lt;code>GpuBuffer&lt;/code> types.&lt;/li>
&lt;li>Currently, the &lt;code>Lluvia&lt;/code> calculator cannot handle &lt;code>GpuBuffer&lt;/code> packets.&lt;/li>
&lt;/ol>
&lt;p>Finally, the &lt;code>Lluvia&lt;/code> calculator runs the configured GPU pipeline.&lt;/p>
&lt;p>&lt;img src="featured_mobile_graph.png" alt="">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">GpuBuffer support&lt;/h4>
Support for transferring data to and from &lt;code>GpuBuffer&lt;/code> packets in the &lt;code>LluviaCalculator&lt;/code> is planned. This will avoid the use of &lt;code>GpuBufferToImageFrame&lt;/code> and &lt;code>ImageFrameToGpuBuffer&lt;/code> calculators, thus reducing the memory copy overhead.
&lt;/div>
&lt;h2 id="android-application">Android application&lt;/h2>
&lt;p>The &lt;a href="https://github.com/google/mediapipe">mediapipe repository&lt;/a> provides examples on how to build Android applications that run the framework. The dataflow is as follows:&lt;/p>
&lt;ol>
&lt;li>In Java/Kotlin, configure the app to open the camera. &lt;a href="https://developer.android.com/training/camera2">Camera2&lt;/a> or &lt;a href="https://developer.android.com/training/camerax">CameraX&lt;/a> APIs can be used.&lt;/li>
&lt;li>Camera frames are received on Surface objects, opaque objects that hold reference to the image pixel data.&lt;/li>
&lt;li>The surface objects are transferred to the mediapipe graph, entering through the &lt;code>input_stream&lt;/code>. In there, the packets are sent as &lt;code>GpuBuffer&lt;/code> to be consumed by the calculators.&lt;/li>
&lt;li>The graph execution takes place, and the output packets are received by the application through the &lt;code>output_stream&lt;/code>. The &lt;code>GpuBuffer&lt;/code> packets are transformed to Android surface objects.&lt;/li>
&lt;li>The surface objects are rendered in the screen.&lt;/li>
&lt;/ol>
&lt;h3 id="mediapipe-android-archive">Mediapipe Android archive&lt;/h3>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Build instructions&lt;/h4>
The &lt;a href="/docs/gettingstarted/mediapipe_integration/">mediapipe integration guide&lt;/a> includes new instructions on how to configure the project to support Android builds.
&lt;/div>
&lt;p>Apps can consume medipipe libraries through Android Archive files (AAR). Archives are a special type of library containing JVM classes, assets, and native libraries (compiled for x86, arm64, or other architectures). Archives can be imported to the app either by placing them within the app source tree, or by declaring a dependency to a remote repository (e.g. Maven).&lt;/p>
&lt;p>Mediapipe bazel rules include targets to build AAR files than be used on Android. The &lt;code>lluvia-mediapipe&lt;/code> repo uses these rules to compile an archive that compiles lluvia along with mediapipe, and export all the required assets (node library, scripts and graphs). The AAR is created by running:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bazel build &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> -c opt &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --host_crosstool_top&lt;span style="color:#000;font-weight:bold">=&lt;/span>@bazel_tools//tools/cpp:toolchain &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --fat_apk_cpu&lt;span style="color:#000;font-weight:bold">=&lt;/span>arm64-v8a &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> //mediapipe/lluvia-mediapipe/java/ai/lluvia:lluvia_aar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>where &lt;code>--fat_apk_cpu=arm64-v8a&lt;/code> defines the CPU architectures that the native code will be compiled to. The archive is available at:&lt;/p>
&lt;pre tabindex="0">&lt;code>bazel-bin/mediapipe/lluvia-mediapipe/java/ai/lluvia/lluvia_aar.aar
&lt;/code>&lt;/pre>&lt;p>which can directly be copied to the App&amp;rsquo;s libraries, or exported to a remote repository.&lt;/p>
&lt;h2 id="discussion">Discussion&lt;/h2>
&lt;p>This post explained how to use Mediapipe to run Lluvia compute pipelines on Android systems. The mobile graph uses the &lt;code>FlowLimiter&lt;/code> calculator to control the rate at which image packets are consumed by the pipeline. Future work includes:&lt;/p>
&lt;ul>
&lt;li>Support &lt;code>GpuBuffer&lt;/code> input and output packets in the &lt;code>Lluvia&lt;/code> calculator.&lt;/li>
&lt;li>Fully working Android code example.&lt;/li>
&lt;li>Use the &lt;a href="https://developer.android.com/agi/">Android GPU Inspector&lt;/a> to profile the performance of the app.&lt;/li>
&lt;/ul></description></item><item><title>Blog: Mediapipe integration</title><link>/blog/2022/10/08/mediapipe-integration/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate><guid>/blog/2022/10/08/mediapipe-integration/</guid><description>
&lt;img src="/blog/2022/10/08/mediapipe-integration/featured_mediapipe_graph_hu65aecad6560b63c48869209c6ef34afc_11143_640x0_resize_catmullrom_3.png" width="640" height="861"/>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://mediapipe.dev/">Mediapipe&lt;/a> is a cross-platform framework to create complex Computer Vision pipelines both for offline and real-time applications. It leverages popular frameworks such as OpenCV and Tensorflow to process audio, video, and run deep learning models. By integrating Lluvia into mediapipe, it is possible to speed up some of those computations by creating a GPU compute pipeline.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/xBtUh7rrSgI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Difference 1: project scope&lt;/h4>
&lt;p>Mediapipe is a more general framework than Lluvia. Mediapipe, at its core, is a compute graph scheduler, where each node can contain any arbitrary processing logic. The integration of third-party frameworks (e.g. OpenCV, Tensorflow, Lluvia) gives the framework its power for developing complex Computer Vision pipelines.&lt;/p>
&lt;p>Lluvia, on the other hand, is specialized in creating compute pipelines running efficiently on GPU. Bringing the project to Mediapipe will enable easier integration with other frameworks and increase runtime performance of Computer Vision applications.&lt;/p>
&lt;/div>
&lt;h3 id="on-graphs-calculators-and-packets">On Graphs, Calculators and Packets&lt;/h3>
&lt;p>Mediapipe uses &lt;strong>Directed Acylic Graphs&lt;/strong> to describe the compute pipeline to be run by the framework. Each node in the graph is denoted a &lt;strong>Calculator&lt;/strong>. Each calculator declares its inputs and outputs contract, establishing the type of &lt;strong>packet&lt;/strong> it can handle, and defines a function to process those packets.&lt;/p>
&lt;p>Graphs are described as Protobuffers, with the configuration for each calculator. Mediapipe takes this data at runtime, instantiate each calculator, and connects it to its up and downstream neighbors according to the supplied contracts.&lt;/p>
&lt;p>Packets enter the graph through &lt;strong>input streams&lt;/strong> and leave it through &lt;strong>output streams&lt;/strong>. When a new packet arrives, mediapipe schedules the processing of that packet to the corresponding calculator, or enqueues it if it is busy.&lt;/p>
&lt;p>The figure below illustrates a mediapipe graph for performing &lt;a href="https://viz.mediapipe.dev/demo/edge_detection">edge detection on the GPU&lt;/a>. Each calculator receives GPU image packets and schedules execution on the available device.&lt;/p>
&lt;p>&lt;img src="mediapipe_edgedetection.png" alt="">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Difference 2: packets and graph scheduling&lt;/h4>
&lt;p>A packet in Mediapipe is an independent piece of data that travels through the calculator graphs. This enables Mediapipe to schedule running several calculators concurrently, thus potentially increasing performance.&lt;/p>
&lt;p>In Lluvia, nodes connected through inputs and outputs do not allocate new memory on each run of the node. Instead, all the memory is allocated at node initialization time, and exposed through the node&amp;rsquo;s ports. Then, the whole graph is scheduled to run on the GPU device in one go. This reduces the delay in computations as avoids cross-talk between the host CPU and the GPU to synchronize individual node execution.&lt;/p>
&lt;/div>
&lt;h2 id="lluvia-as-a-mediapipe-dependency">Lluvia as a mediapipe dependency&lt;/h2>
&lt;p>Mediapipe, as well as Lluvia, are built using &lt;a href="https://bazel.build/">Bazel&lt;/a>. As a consequence, the integration of Lluvia can be done by including the project as a Bazel dependency into Mediapipe repository.
The current approach to achieve this is through the use of an auxiliary repository, &lt;a href="https://github.com/jadarve/lluvia-mediapipe">&lt;strong>lluvia-mediapipe&lt;/strong>&lt;/a>, that contains the &lt;strong>LluviaCalculator&lt;/strong> node to run GPU compute-pipelines as a Mediapipe calculator. The build instructions are available in the &lt;a href="/docs/gettingstarted/mediapipe_integration/">mediapipe integration guide&lt;/a>. The process is as follows:&lt;/p>
&lt;ol>
&lt;li>Clone Mediapipe repository alongside Lluvia.&lt;/li>
&lt;li>Configure Mediapipe&amp;rsquo;s Bazel workspace to build in your host machine.&lt;/li>
&lt;li>Include Lluvia as a dependency to Mediapipe.&lt;/li>
&lt;li>Clone &lt;code>lluvia-mediapipe&lt;/code> repository inside Mediapipe to enable building its targets.&lt;/li>
&lt;li>Run the tests included in the repository to validate the build.&lt;/li>
&lt;/ol>
&lt;p>The directory structure of the three projects should look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>lluvia &amp;lt;-- lluvia repository
mediapipe &amp;lt;-- mediapipe repository
â”œâ”€â”€ BUILD.bazel
â”œâ”€â”€ LICENSE
â”œâ”€â”€ ...
â”œâ”€â”€ mediapipe &amp;lt;--
â”‚Â Â  â”œâ”€â”€ BUILD
â”‚Â Â  â”œâ”€â”€ calculators
â”‚Â Â  â”œâ”€â”€ examples
â”‚Â Â  â”œâ”€â”€ framework
â”‚Â Â  â”œâ”€â”€ gpu
â”‚Â Â  â”œâ”€â”€ ...
â”‚Â Â  â”œâ”€â”€ lluvia-mediapipe &amp;lt;-- lluvia-mediapipe repository
â”œâ”€â”€ ...
â”œâ”€â”€ .bazelrc
â””â”€â”€ WORKSPACE
&lt;/code>&lt;/pre>&lt;p>Once Mediapipe builds correctly, it is possible to create graphs that include the &lt;code>LluviaCalculator&lt;/code>.&lt;/p>
&lt;h2 id="the-lluviacalculator">The &lt;strong>&lt;code>LluviaCalculator&lt;/code>&lt;/strong>&lt;/h2>
&lt;p>The &lt;strong>&lt;code>LluviaCalculator&lt;/code>&lt;/strong> is in charge of initializing Lluvia, binding input and output streams from mediapipe to lluvia ports, and running a given compute pipeline.
The figure below illustrates a basic mediapipe graph utilizing lluvia, while the code below shows the graph description using Protobuffer text syntax:&lt;/p>
&lt;p>&lt;img src="featured_mediapipe_graph.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>input_stream&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;input_stream&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>output_stream&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;output_stream&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>node&lt;span style="color:#000;font-weight:bold">:&lt;/span> {&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> calculator&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;LluviaCalculator&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> input_stream&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;IN_0:input_stream&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> output_stream&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;OUT_0:output_stream&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> node_options {&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> [type.googleapis.com&lt;span style="color:#000;font-weight:bold">/&lt;/span>lluvia.LluviaCalculatorOptions]&lt;span style="color:#000;font-weight:bold">:&lt;/span> {&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> enable_debug&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">true&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> library_path&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;path to .zip node library file&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> script_path&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;path to .lua script defining the main container node&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> container_node&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;mediapipe/examples/Passthrough&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> input_port_binding&lt;span style="color:#000;font-weight:bold">:&lt;/span> {&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> mediapipe_tag&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;IN_0&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> lluvia_port&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;in_image&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> }&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> }&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> }&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>}&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>where:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>enable_debug&lt;/code> flag tells whether or not the Vulkan debug extensions used by Lluvia should be loaded during session creation. This flag might be set to &lt;code>false&lt;/code> in production applications to improve runtime performance.&lt;/li>
&lt;li>The &lt;code>library_path&lt;/code> declare paths to node libraries (a &lt;code>.zip&lt;/code> file) containing Lluvia nodes (Container and Compute). This attribute can be repeated several times.&lt;/li>
&lt;li>The &lt;code>script_path&lt;/code> is the path to a &lt;code>lua&lt;/code> script declaring a &lt;code>ContainerNode&lt;/code> that Lluvia will instantiate as the &amp;ldquo;main&amp;rdquo; node to run inside the calculator.&lt;/li>
&lt;li>&lt;code>input_port_binding&lt;/code>, maps mediapipe input tags to the main &lt;code>ContainerNode&lt;/code> port. In the example above, mediapipe&amp;rsquo;s input tag &lt;code>IN_0&lt;/code> is mapped to lluvia&amp;rsquo;s &lt;code>in_image&lt;/code> port.&lt;/li>
&lt;/ol>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>&lt;code>lluvia-mediapipe&lt;/code> includes two applications, &lt;strong>&lt;code>single_image&lt;/code>&lt;/strong> and &lt;strong>&lt;code>webcam&lt;/code>&lt;/strong> to run on the host system. The &lt;code>single_image&lt;/code> app, as the name suggests, reads the content of a single image and feeds it to a Mediapipe graph.&lt;/p>
&lt;p>The command below executes the binary with a graph configured to run the &lt;a href="/nodes/lluvia/color/bgra2gray">&lt;code>lluvia/color/BGRA2Gray&lt;/code> compute node&lt;/a> to convert from the BGRA input to gray scale:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bazel run --copt -DMESA_EGL_NO_X11_HEADERS --copt -DEGL_NO_X11 &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> //mediapipe/lluvia-mediapipe/examples/desktop/single_image:single_image -- &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --input_image&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">${&lt;/span>&lt;span style="color:#008080">HOME&lt;/span>&lt;span style="color:#d14">}&lt;/span>/git/lluvia/lluvia/resources/mouse.jpg &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --script_file&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">${&lt;/span>&lt;span style="color:#008080">HOME&lt;/span>&lt;span style="color:#d14">}&lt;/span>/git/mediapipe/mediapipe/lluvia-mediapipe/examples/desktop/graphs/BGRA2Gray/script.lua &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --graph_file&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">${&lt;/span>&lt;span style="color:#008080">HOME&lt;/span>&lt;span style="color:#d14">}&lt;/span>/git/mediapipe/mediapipe/lluvia-mediapipe/examples/desktop/graphs/BGRA2Gray/graph.pbtxt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>where &lt;code>${HOME}/git&lt;/code> is the base folder where Lluvia and Mediapipe are cloned. Change this according to your setup.&lt;/p>
&lt;p>&lt;img src="single_image_bgra2gray.png" alt="">&lt;/p>
&lt;p>A more sophisticated example is running the &lt;a href="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm">Horn and Schunck optical flow&lt;/a> algorithm inside of Mediapipe. The &lt;code>webcam&lt;/code> binary opens the default capture device using OpenCV and transfers the captured frames the compute graph. The graph is a single &lt;code>LluviaCalculator&lt;/code> running several nodes:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bazel run --copt -DMESA_EGL_NO_X11_HEADERS --copt -DEGL_NO_X11 &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> //mediapipe/lluvia-mediapipe/examples/desktop/webcam:webcam -- &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --script_file&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">${&lt;/span>&lt;span style="color:#008080">HOME&lt;/span>&lt;span style="color:#d14">}&lt;/span>/git/mediapipe/mediapipe/lluvia-mediapipe/examples/desktop/graphs/HornSchunck/script.lua &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --graph_file&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">${&lt;/span>&lt;span style="color:#008080">HOME&lt;/span>&lt;span style="color:#d14">}&lt;/span>/git/mediapipe/mediapipe/lluvia-mediapipe/examples/desktop/graphs/HornSchunck/graph.pbtxt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>where &lt;code>--graph_file=${HOME}/git/mediapipe/mediapipe/lluvia-mediapipe/examples/desktop/graphs/HornSchunck/graph.pbtxt&lt;/code> is the path to Mediapipe&amp;rsquo;s graph to be run by the app, and &lt;code>--script_file=${HOME}/git/mediapipe/mediapipe/lluvia-mediapipe/examples/desktop/graphs/HornSchunck/script.lua&lt;/code> points to a Lua script defining the Container node to run inside of the &lt;code>LluviaCalculator&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
skinparam linetype ortho
state LluviaCalculator as &amp;#34;LluviaCalculator&amp;#34; {
state input_stream as &amp;#34;IN_0:input_stream&amp;#34; &amp;lt;&amp;lt;inputPin&amp;gt;&amp;gt;
state output_stream as &amp;#34;OUT_0:output_stream&amp;#34; &amp;lt;&amp;lt;outputPin&amp;gt;&amp;gt;
state ContainerNode as &amp;#34;mediapipe/examples/HornSchunck&amp;#34; {
state in_image &amp;lt;&amp;lt;inputPin&amp;gt;&amp;gt;
state BGRA2Gray
state HS as &amp;#34;HornSchunck&amp;#34;
state Flow2RGBA
state RGBA2BGRA
input_stream -down-&amp;gt; in_image
in_image -down-&amp;gt; BGRA2Gray
BGRA2Gray -down-&amp;gt; HS: in_gray
HS -down-&amp;gt; Flow2RGBA: in_flow
Flow2RGBA -down-&amp;gt; RGBA2BGRA: in_rgba
RGBA2BGRA -down-&amp;gt; out_image &amp;lt;&amp;lt;outputPin&amp;gt;&amp;gt;
}
out_image -down-&amp;gt; output_stream &amp;lt;&amp;lt;outputPin&amp;gt;&amp;gt;
}
@enduml
&lt;/code>&lt;/pre>&lt;p>First, the input image is transformed from BGRA color space to gray scale. Next, the images are fed to the &lt;a href="/nodes/lluvia/opticalflow/hornschunck/hornschunck">&lt;strong>&lt;code>HornSchunck&lt;/code>&lt;/strong> container node&lt;/a> to compute optical flow. The estimated flow is then converted to color using the &lt;a href="/nodes/lluvia/viz/flow2rgba">&lt;strong>&lt;code>Flow2RGBA&lt;/code>&lt;/strong> compute node&lt;/a>, and finally, the RGBA output is converted to BGRA to proper rendering in the window opened by OpenCV.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Difference 3: calculators as code vs. nodes as data&lt;/h4>
&lt;p>In Mediapipe, every Calculator must be compiled and integrated into the binary at build time, thus requiring rebuilding every time a new Calculator must be added or modified.&lt;/p>
&lt;p>Lluvia describes nodes as a pair of Lua and GLSL (for ComputeNode) files that are compiled and packaged into a node library as a &lt;strong>&lt;code>.zip&lt;/code>&lt;/strong> file. Once packaged, the library can be imported on any runtime where Lluvia runs. This eases the developer experience as one can develop nodes in a higher-level environment, using &lt;a href="https://colab.research.google.com/drive/1SPwxUIdYxCALD0d0w7rE93EuX0fm832S?usp=sharing">Python in a Jupyter notebook&lt;/a> for instance, package the nodes in a node library and then use them in any environment (Mediapipe for instance).&lt;/p>
&lt;/div>
&lt;h2 id="discussion">Discussion&lt;/h2>
&lt;p>This article presented the integration of Lluvia into the Mediapipe project. By added the project into Mediapipe, it is possible to leverage the GPU compute-pipeline capabilities of Lluvia to speed up parts of complex Computer Vision applications.&lt;/p>
&lt;p>The integrations between thw two projects is achieved through the &lt;strong>&lt;code>LluviaCalculator&lt;/code>&lt;/strong> which runs any arbitrary &lt;code>ContainerNode&lt;/code>. This calculator is in early stages of development, and feedback is very welcomed. Some immediate improvements include:&lt;/p>
&lt;ol>
&lt;li>Support &lt;code>GPUImageFrame&lt;/code> input and output packets. Currently, the calculator only accepts CPU &lt;code>ImageFrame&lt;/code> packets, thus introducing some latency while copying data from CPU memory space to the GPU.&lt;/li>
&lt;li>Support Mediapipe side packets to send configuration updates to the calculator.&lt;/li>
&lt;li>Include more configuration attributes (e.g. node parameters) in the Protobuffer type.&lt;/li>
&lt;/ol>
&lt;p>And finally, testing the integration in other platforms such as Android.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://mediapipe.dev/">Mediapipe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jadarve/lluvia-mediapipe">lluvia-mediapipe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bazel.build/">Bazel&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Camera undistort</title><link>/blog/2022/09/18/camera-undistort/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>/blog/2022/09/18/camera-undistort/</guid><description>
&lt;img src="/blog/2022/09/18/camera-undistort/featured_CameraUndistort_rgba8ui_hu7788cecf448c7281bfdd2d0147339e58_655674_640x0_resize_catmullrom_3.png" width="640" height="341"/>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Jupyter notebook:&lt;/h4>
A Jupyter notebook with the code in this article is available in &lt;a href="https://colab.research.google.com/drive/1ZCuY7E904K7IdsI0FW2O13H_bYn-2LYJ?usp=sharing">Google Colab&lt;/a>. Check it out!
&lt;/div>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>Camera undistort is the process by which distortions generated by the optics used in the camera during the capture process are corrected in software. The process requires a mathematical model of the distortion, and a calibration procedure to estimate the parameters of such model given actual images.&lt;/p>
&lt;p>An overview of the camera modeling is pressented in the Computer Vision book of &lt;a href="https://szeliski.org/Book/">Szeliski&lt;/a> and the Multiple View Geometry book of &lt;a href="https://www.cambridge.org/core/books/multiple-view-geometry-in-computer-vision/0B6F289C78B2B23F596CAA76D3D43F7A">Hartley and Zisserman&lt;/a>, as well as the articles of &lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr98-71.pdf">Zhang&lt;/a>, &lt;a href="https://doi.org/10.1109/34.291450">Wei and Ma&lt;/a>.&lt;/p>
&lt;p>There are several calibration toolboxes available for estimating the camera model from a series of images:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.opencv.org/4.x/dc/dbb/tutorial_py_calibration.html">OpenCV calibration routines&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://www.mathworks.com/help/vision/ref/cameracalibrator-app.html">Matlab camera calibration App&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Any of such frameworks can be used to estimate the camera model parameters. Those parameters are the input to the undistort method presented in this article to rectify raw captured images.&lt;/p>
&lt;h3 id="camera-model">Camera model&lt;/h3>
&lt;p>The figure below illustrates the camera model.&lt;/p>
&lt;p>&lt;img src="camera_model.svg" alt="">&lt;/p>
&lt;p>The 3D point $\mathbf{x} \in \mathbb{R}^3$ is expressed relative to the camera body fixed frame. It projects onto the camera image plane as pixel $\mathbf{p} := (u, v)^\top \in \mathbb{R}^2$ as&lt;/p>
&lt;p>$$
\begin{equation}
\begin{pmatrix}
\mathbf{p} \\
1
\end{pmatrix} := \begin{pmatrix}
u \\
v \\
1
\end{pmatrix} = \frac{\mathbf{K} \mathbf{x}}{ \left&amp;lt; e_3, \mathbf{x} \right&amp;gt;}
\end{equation}
$$&lt;/p>
&lt;p>where $\mathbf{K} \in \mathbb{R}^{3\times3}$ is the camera intrinsics matrix, $e_3 := (0, 0, 1)^\top$, and $\left&amp;lt; e_3, \mathbf{x} \right&amp;gt;$ is the dot product between the two vectors. The units of $\mathbf{p}$ are actual pixel coordinates in the ranges $u \in [0, W)$ and $v \in [0, H)$, with $W$ and $H$ denoting the image width and height respectively.&lt;/p>
&lt;p>Given a pixel point, the corresponding 3D coordinate $\bar{\mathbf{x}}$ in the image plane is defined as:&lt;/p>
&lt;p>$$
\begin{equation}
\bar{\mathbf{x}} := \begin{pmatrix}
\bar{x} \\
\bar{y} \\
\bar{z} \\
\end{pmatrix} = \mathbf{K}^{-1} \begin{pmatrix}
\mathbf{p} \\
1
\end{pmatrix}
\end{equation}
$$&lt;/p>
&lt;div class="alert alert-warning" role="alert">
Notice that this projection does return $\bar{\mathbf{x}}$ and not the original 3D point $\mathbf{x}$. To return the actual 3D position in the world, the depth information is needed to project $\bar{\mathbf{x}}$ outside of the image plane to the world.
&lt;/div>
&lt;h3 id="standard-distortion-model">Standard distortion model&lt;/h3>
&lt;p>The standard distortion model is formed by two components:&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>radial&lt;/strong> component parameterized by three coefficients: $k_1$, $k_2$, and $k_3$.&lt;/li>
&lt;li>A &lt;strong>tangential&lt;/strong> component with two parameters: $p_1$ and $p_2$.&lt;/li>
&lt;/ul>
&lt;p>The radial distortion component for a given pixel $\mathbf{p}$ is computed as&lt;/p>
&lt;p>$$
\begin{equation}
\bar{\mathbf{x}}_r :=
R \begin{pmatrix}
\bar{x} \\
\bar{y} \\
0
\end{pmatrix}
\end{equation}
$$&lt;/p>
&lt;p>where $R \in \mathbb{R}$ is&lt;/p>
&lt;p>$$
\begin{equation}
R = k_1 r^2 + k_2 r^4 + k_3 r^6
\end{equation}
$$&lt;/p>
&lt;p>with&lt;/p>
&lt;p>$$
\begin{equation}
r^2 = \bar{x}^2 + \bar{y}^2
\end{equation}
$$&lt;/p>
&lt;p>and $\bar{x}, \bar{y}$ are the $x$ and $y$ coordinates of the projection of pixel $\mathbf{p}$ using equation (2).&lt;/p>
&lt;p>The tangential distortion is computed as:&lt;/p>
&lt;p>$$
\begin{equation}
\bar{\mathbf{x}}_p :=
\begin{pmatrix}
2 p_1 \bar{x}\bar{y} + p_2(r^2 + 2\bar{x}^2) \\
p_1(r^2 + 2 \bar{y}^2) + 2 p_2 \bar{x}\bar{y} \\
0
\end{pmatrix}
\end{equation}
$$&lt;/p>
&lt;p>Finally, the undistorted image plane coordinates $\bar{\mathbf{x}}_u$ is computed as:&lt;/p>
&lt;p>$$
\begin{equation}
\bar{\mathbf{x}}_u = \bar{\mathbf{x}} + \bar{\mathbf{x}}_r + \bar{\mathbf{x}}_p
\end{equation}
$$&lt;/p>
&lt;p>Given $\bar{\mathbf{x}}_u$, the corresponding undistorted pixel coordinate is:&lt;/p>
&lt;p>$$
\begin{equation}
\begin{pmatrix}
\mathbf{p}_u \\
1
\end{pmatrix} := \begin{pmatrix}
u_u \\
v_u \\
1
\end{pmatrix} = \frac{\mathbf{K} \bar{\mathbf{x}}_u}{ \left&amp;lt; e_3, \bar{\mathbf{x}}_u \right&amp;gt;}
\end{equation}
$$&lt;/p>
&lt;div class="alert alert-primary" role="alert">
The convention for the tangential parameters $p_1$ and $p_2$ is the same to that of OpenCV. However, this convention is flipped to respect to that presented in the article of &lt;em>Wei and Ma&lt;/em>.
&lt;/div>
&lt;p>The figures below illustrate the effects of the radial and tangential distortion. A possitive value of $k_1$ creates a &lt;strong>barrel&lt;/strong> effect, while a negative value generates a &lt;strong>pincushion&lt;/strong> effect. For the tangential parameters, $p_1$ models missalignment between the image sensor and the image plane in the $y$ axis, while $p_2$ models such missalignment in the $x$ axis.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1090px">
&lt;img class="card-img-top" src="/blog/2022/09/18/camera-undistort/barrel_hu50158db2a2211989e3567bbd09d87fee_83263_1080x432_resize_catmullrom_3.png" width="1080" height="432">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1090px">
&lt;img class="card-img-top" src="/blog/2022/09/18/camera-undistort/pincushion_hu4c39888b16645a417e090a250a8a92a0_88415_1080x432_resize_catmullrom_3.png" width="1080" height="432">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1090px">
&lt;img class="card-img-top" src="/blog/2022/09/18/camera-undistort/tangent_p1_hu10d855f00f7694d9886eccb2aa825202_88297_1080x432_resize_catmullrom_3.png" width="1080" height="432">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1090px">
&lt;img class="card-img-top" src="/blog/2022/09/18/camera-undistort/tangent_p2_hudf879045f85972fbd42edc54ab395d40_84480_1080x432_resize_catmullrom_3.png" width="1080" height="432">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>The camera undistort procedure is implemented as a single &lt;strong>ComputeNode&lt;/strong> with the following interface:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
skinparam linetype ortho
state CameraUndistort as &amp;#34;CameraUndistort_rgba8ui&amp;#34; {
state in_rgba &amp;lt;&amp;lt;inputPin&amp;gt;&amp;gt;
state in_camera &amp;lt;&amp;lt;inputPin&amp;gt;&amp;gt;
state out_rgba &amp;lt;&amp;lt;outputPin&amp;gt;&amp;gt;
}
note top of CameraUndistort
Parameters
----------
camera_model : int. Defaults to 0.
The camera model used for rectifying the image. Possible values are:
* 0: standard model
end note
@enduml
&lt;/code>&lt;/pre>&lt;p>The node explicitly requires &lt;code>rgba8ui&lt;/code> images to be bound to the node. The output &lt;code>out_rgba&lt;/code> is allocated by the node. The &lt;code>in_camera&lt;/code> is a &lt;strong>&lt;code>UniformBuffer&lt;/code>&lt;/strong> storing the camera model. This model is defined by the &lt;code>ll_camera&lt;/code> struct in GLSL as:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-7" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-GLSL"
id="tabs-7-0-tab" data-toggle="tab" href="#tabs-7-0" role="tab" onclick="handleClick(&amp;#34;GLSL&amp;#34;);"
aria-controls="tabs-7-0" aria-selected="true">
GLSL
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-7-content">&lt;div class="tab-pane fade show active"
id="tabs-7-0" role="tabpanel" aria-labelled-by="tabs-7-0-tab">&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-glsl" data-lang="glsl">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">struct&lt;/span> ll_camera {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">// The camera intrinsic matrix. Used to project 3D points expressed in the camera coordinate frame&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">// to the image plane and convert to pixel coordinates.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mat3 K;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">// The inverse camera intrinsic matrix. Used to convert from pixel to image plane coordinates.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mat3 Kinv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">// Radial distortion coefficients. For the standard camera model,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">// only the first 3 coefficients are used (XYZ).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">vec4&lt;/span> radialDistortion;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">// Tangential distortion coefficients. Only the first 2 coefficients are used (XY).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">vec4&lt;/span> tangentialDistortion;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/div>
&lt;/div>
&lt;p>Uniform buffers are a special type of buffers used to store small data structures used in graphics and compute pipelines. The Vulkan tutorial on Uniform Buffers is a &lt;a href="https://vulkan-tutorial.com/Uniform_buffers/Descriptor_layout_and_buffer">good read&lt;/a> on how they are used in general. Notice that the &lt;code>ll_camera&lt;/code> uses GLSL types such as &lt;code>mat3&lt;/code> and &lt;code>vec4&lt;/code>. In the host CPU, one must use corresponding types and follow the byte alignmnet rules to make the buffer usable in the GPU. The alignment rules are defined by the &lt;strong>&lt;code>STD140&lt;/code>&lt;/strong> &lt;a href="https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)">layout rules&lt;/a>. For the &lt;code>ll_camera&lt;/code> struct, the &lt;code>mat3&lt;/code> attributes must be transferred as a matrix of 4 rows and 3 columns in order to meet the alignment requirements.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Matrix storage in GLSL&lt;/h4>
In GLSL, matrices are stored in &lt;strong>column-major&lt;/strong> order. For a given matrix &lt;code>M&lt;/code> indexed as &lt;code>M[i, j]&lt;/code> where &lt;code>i&lt;/code> and &lt;code>j&lt;/code> are the row and column indexes, respectively, the elements &lt;code>M[i, j]&lt;/code> and &lt;code>M[i, j+1]&lt;/code> are stored contiguously in memory. This is different, for instance, to numpy&amp;rsquo;s default ordering as &lt;strong>row-major&lt;/strong>.
&lt;/div>
&lt;p>The code block below shows a complete example on how to run the &lt;code>lluvia/camera/CameraUndistort_rgba8ui&lt;/code> node using a dummy camera model with radial and tangential distortion:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-9" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Python"
id="tabs-9-0-tab" data-toggle="tab" href="#tabs-9-0" role="tab" onclick="handleClick(&amp;#34;Python&amp;#34;);"
aria-controls="tabs-9-0" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-9-content">&lt;div class="tab-pane fade show active"
id="tabs-9-0" role="tabpanel" aria-labelled-by="tabs-9-0-tab">&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">lluvia&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">ll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">lluvia.util&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">ll_util&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">numpy&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">np&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">matplotlib.pyplot&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">plt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>createSession()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># memory to store the input and output images&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>memory &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createMemory(ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>MemoryPropertyFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>DeviceLocal)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># memory to store the uniform buffer with the camera parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>host_memory &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createMemory([ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>MemoryPropertyFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>DeviceLocal,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>MemoryPropertyFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>HostVisible,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>MemoryPropertyFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>HostCoherent])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># read a sample image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sampleImage &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll_util&lt;span style="color:#000;font-weight:bold">.&lt;/span>readSampleImage(&lt;span style="color:#d14">&amp;#39;koala&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># draw a grid on top of the sample image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Yrange &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>arange(&lt;span style="color:#099">0&lt;/span>, sampleImage&lt;span style="color:#000;font-weight:bold">.&lt;/span>shape[&lt;span style="color:#099">0&lt;/span>], &lt;span style="color:#099">128&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ylines &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>concatenate([n &lt;span style="color:#000;font-weight:bold">+&lt;/span> Yrange &lt;span style="color:#000;font-weight:bold">for&lt;/span> n &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#0086b3">range&lt;/span>(&lt;span style="color:#099">4&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Xrange &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>arange(&lt;span style="color:#099">0&lt;/span>, sampleImage&lt;span style="color:#000;font-weight:bold">.&lt;/span>shape[&lt;span style="color:#099">1&lt;/span>], &lt;span style="color:#099">128&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Xlines &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>concatenate([n &lt;span style="color:#000;font-weight:bold">+&lt;/span> Xrange &lt;span style="color:#000;font-weight:bold">for&lt;/span> n &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#0086b3">range&lt;/span>(&lt;span style="color:#099">4&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sampleImage[Ylines, &lt;span style="color:#000;font-weight:bold">...&lt;/span>] &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sampleImage[:, Xlines, &lt;span style="color:#000;font-weight:bold">...&lt;/span>] &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># the input image view must be sampled. This example uses nearest neighbor interpolation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>in_rgba &lt;span style="color:#000;font-weight:bold">=&lt;/span> memory&lt;span style="color:#000;font-weight:bold">.&lt;/span>createImageViewFromHost(sampleImage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filterMode&lt;span style="color:#000;font-weight:bold">=&lt;/span>ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>ImageFilterMode&lt;span style="color:#000;font-weight:bold">.&lt;/span>Nearest,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addressMode&lt;span style="color:#000;font-weight:bold">=&lt;/span>ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>ImageAddressMode&lt;span style="color:#000;font-weight:bold">.&lt;/span>Repeat,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> normalizedCoordinates&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">False&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sampled&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">###################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Camera parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>W &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0086b3">float&lt;/span>(in_rgba&lt;span style="color:#000;font-weight:bold">.&lt;/span>width)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>H &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0086b3">float&lt;/span>(in_rgba&lt;span style="color:#000;font-weight:bold">.&lt;/span>height)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Dummy camera matrix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>K &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>array([[W, &lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">*&lt;/span>(W &lt;span style="color:#000;font-weight:bold">-&lt;/span>&lt;span style="color:#099">1&lt;/span>)],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#099">0&lt;/span>, H, &lt;span style="color:#099">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">*&lt;/span>(H &lt;span style="color:#000;font-weight:bold">-&lt;/span>&lt;span style="color:#099">1&lt;/span>)],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">1&lt;/span>] ], dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>float32, order&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#39;F&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Kinv &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>linalg&lt;span style="color:#000;font-weight:bold">.&lt;/span>inv(K)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>radialDistortion &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>array([&lt;span style="color:#099">0.5&lt;/span>, &lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">0&lt;/span>,], dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>float32)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tangentialDistortion &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>array([&lt;span style="color:#099">0.1&lt;/span>, &lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">0&lt;/span>], dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>float32)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># align the matrices according to the STD140 rules (column major, 4-component vectors)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>K_aligned &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>zeros((&lt;span style="color:#099">4&lt;/span>,&lt;span style="color:#099">3&lt;/span>), dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>float32, order&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#39;F&amp;#39;&lt;/span>); K_aligned[:&lt;span style="color:#099">3&lt;/span>, :&lt;span style="color:#099">3&lt;/span>] &lt;span style="color:#000;font-weight:bold">=&lt;/span> K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Kinv_aligned &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>zeros((&lt;span style="color:#099">4&lt;/span>,&lt;span style="color:#099">3&lt;/span>), dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>float32, order&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#39;F&amp;#39;&lt;/span>); Kinv_aligned[:&lt;span style="color:#099">3&lt;/span>, :&lt;span style="color:#099">3&lt;/span>] &lt;span style="color:#000;font-weight:bold">=&lt;/span> Kinv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># create bytes buffer from matrices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>buf &lt;span style="color:#000;font-weight:bold">=&lt;/span> K_aligned&lt;span style="color:#000;font-weight:bold">.&lt;/span>tobytes(order&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#39;F&amp;#39;&lt;/span>) &lt;span style="color:#000;font-weight:bold">+&lt;/span> Kinv_aligned&lt;span style="color:#000;font-weight:bold">.&lt;/span>tobytes(order&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#39;F&amp;#39;&lt;/span>) &lt;span style="color:#000;font-weight:bold">+&lt;/span> radialDistortion&lt;span style="color:#000;font-weight:bold">.&lt;/span>tobytes() &lt;span style="color:#000;font-weight:bold">+&lt;/span> tangentialDistortion&lt;span style="color:#000;font-weight:bold">.&lt;/span>tobytes()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npBuf &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>frombuffer(buf, dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>uint8)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># in_camera uniform buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>in_camera &lt;span style="color:#000;font-weight:bold">=&lt;/span> host_memory&lt;span style="color:#000;font-weight:bold">.&lt;/span>createBufferFromHost(npBuf, usageFlags&lt;span style="color:#000;font-weight:bold">=&lt;/span>[ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>BufferUsageFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>TransferSrc,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>BufferUsageFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>TransferDst,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>BufferUsageFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>UniformBuffer])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">###################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Compute node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CameraUndistort &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createComputeNode(&lt;span style="color:#d14">&amp;#39;lluvia/camera/CameraUndistort_rgba8ui&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CameraUndistort&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;camera_model&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#099">1&lt;/span>)) &lt;span style="color:#998;font-style:italic"># standard model&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CameraUndistort&lt;span style="color:#000;font-weight:bold">.&lt;/span>bind(&lt;span style="color:#d14">&amp;#39;in_rgba&amp;#39;&lt;/span>, in_rgba)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CameraUndistort&lt;span style="color:#000;font-weight:bold">.&lt;/span>bind(&lt;span style="color:#d14">&amp;#39;in_camera&amp;#39;&lt;/span>, in_camera)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CameraUndistort&lt;span style="color:#000;font-weight:bold">.&lt;/span>init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CameraUndistort&lt;span style="color:#000;font-weight:bold">.&lt;/span>run()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out_rgba &lt;span style="color:#000;font-weight:bold">=&lt;/span> CameraUndistort&lt;span style="color:#000;font-weight:bold">.&lt;/span>getPort(&lt;span style="color:#d14">&amp;#39;out_rgba&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">###################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Plotting&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fig &lt;span style="color:#000;font-weight:bold">=&lt;/span> plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>figure(figsize&lt;span style="color:#000;font-weight:bold">=&lt;/span>(&lt;span style="color:#099">15&lt;/span>, &lt;span style="color:#099">8&lt;/span>)); fig&lt;span style="color:#000;font-weight:bold">.&lt;/span>set_tight_layout(&lt;span style="color:#000;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>subplot2grid((&lt;span style="color:#099">1&lt;/span>,&lt;span style="color:#099">2&lt;/span>), (&lt;span style="color:#099">0&lt;/span>,&lt;span style="color:#099">0&lt;/span>)); plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>imshow(in_rgba&lt;span style="color:#000;font-weight:bold">.&lt;/span>toHost()[&lt;span style="color:#000;font-weight:bold">...&lt;/span>, :&lt;span style="color:#099">3&lt;/span>]); plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>title(&lt;span style="color:#d14">&amp;#39;in_rgba&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>subplot2grid((&lt;span style="color:#099">1&lt;/span>,&lt;span style="color:#099">2&lt;/span>), (&lt;span style="color:#099">0&lt;/span>,&lt;span style="color:#099">1&lt;/span>)); plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>imshow(out_rgba&lt;span style="color:#000;font-weight:bold">.&lt;/span>toHost()[&lt;span style="color:#000;font-weight:bold">...&lt;/span>, :&lt;span style="color:#099">3&lt;/span>]); plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>title(&lt;span style="color:#d14">&amp;#39;out_rgba&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>show()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/div>
&lt;/div>
&lt;p>Lines 36 to 60 create the uniform buffer containing the camera model. Lines 42 and 45 create the camera intrinsics matrix &lt;code>K&lt;/code> and its inverse &lt;code>Kinv&lt;/code>. Then, in lines 50-51, those matrices are aligned to meet the &lt;code>std140&lt;/code> requirements; in this case, storing each matrix in a 4x3 matrix in column-major ordering (using &lt;code>order='F'&lt;/code> in numpy). Finally, lines 54-55 concatenates all camera parameters to create a single numpy array &lt;code>npBuf&lt;/code> which is then used to create the &lt;code>in_camera&lt;/code> uniform buffer in lluvia.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1090px">
&lt;img class="card-img-top" src="/blog/2022/09/18/camera-undistort/featured_CameraUndistort_rgba8ui_hu7788cecf448c7281bfdd2d0147339e58_655674_1080x576_resize_catmullrom_3.png" width="1080" height="576">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="runtime-performance">Runtime performance&lt;/h2>
&lt;p>A Razer Blade laptop running Ubuntu 22.04LTS was used for the runtime analysis. The laptop is equipped with an Intel i7-11800H processor, and the following Vulkan devices as reported by the code block below:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-11" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Python"
id="tabs-11-0-tab" data-toggle="tab" href="#tabs-11-0" role="tab" onclick="handleClick(&amp;#34;Python&amp;#34;);"
aria-controls="tabs-11-0" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-11-content">&lt;div class="tab-pane fade show active"
id="tabs-11-0" role="tabpanel" aria-labelled-by="tabs-11-0-tab">&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">lluvia&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">ll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">for&lt;/span> dev &lt;span style="color:#000;font-weight:bold">in&lt;/span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>getAvailableDevices():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0086b3">print&lt;/span>(dev)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>NVIDIA GeForce RTX 3070 Laptop GPU.&lt;/li>
&lt;li>Intel(R) UHD Graphics (TGL GT1).&lt;/li>
&lt;li>llvmpipe (LLVM 13.0.1, 256 bits). This is a CPU implementation of the Vulkan API shipped with the &lt;a href="https://docs.mesa3d.org/drivers/llvmpipe.html">Mesa drivers&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>In addition, the &lt;code>cv2.undistort()&lt;/code> function from OpenCV is considered for reference. Five resolutions are used in the evaluation: &lt;code>VGA 640x480&lt;/code>, &lt;code>HD 1280x720&lt;/code>, &lt;code>FHD 1920x1080&lt;/code>, &lt;code>WQHD 2560x1440&lt;/code>, and &lt;code>UHD 3840x2160&lt;/code>. For each resolution, the algorithm is run for 1000 iterations and the median runtime is extracted. The figure and table belows show the runtime for each device and resolution combination.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1450px">
&lt;img class="card-img-top" src="/blog/2022/09/18/camera-undistort/runtime_hud6f35652faa5a6f16711e44a26b14da9_33910_1440x360_resize_catmullrom_3.png" width="1440" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Resolution&lt;/th>
&lt;th style="text-align:left">Device name&lt;/th>
&lt;th style="text-align:right">Runtime median ms&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">VGA 640x480&lt;/td>
&lt;td style="text-align:left">Intel UHD Graphics&lt;/td>
&lt;td style="text-align:right">0.00235&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">0.013888&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">llvmpipe&lt;/td>
&lt;td style="text-align:right">0.604263&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">OpenCV&lt;/td>
&lt;td style="text-align:right">2.04252&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">HD 1280x720&lt;/td>
&lt;td style="text-align:left">Intel UHD Graphics&lt;/td>
&lt;td style="text-align:right">0.007734&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">0.03728&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">llvmpipe&lt;/td>
&lt;td style="text-align:right">1.50221&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">OpenCV&lt;/td>
&lt;td style="text-align:right">6.38165&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">FHD 1920x1080&lt;/td>
&lt;td style="text-align:left">Intel UHD Graphics&lt;/td>
&lt;td style="text-align:right">0.0151045&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">0.07456&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">llvmpipe&lt;/td>
&lt;td style="text-align:right">3.17916&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">OpenCV&lt;/td>
&lt;td style="text-align:right">17.1453&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">WQHD 2560x1440&lt;/td>
&lt;td style="text-align:left">Intel UHD Graphics&lt;/td>
&lt;td style="text-align:right">0.0262145&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">0.109344&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">llvmpipe&lt;/td>
&lt;td style="text-align:right">5.97528&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">OpenCV&lt;/td>
&lt;td style="text-align:right">22.8469&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">UHD 3840x2160&lt;/td>
&lt;td style="text-align:left">Intel UHD Graphics&lt;/td>
&lt;td style="text-align:right">0.058583&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">0.242688&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">llvmpipe&lt;/td>
&lt;td style="text-align:right">17.6178&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">OpenCV&lt;/td>
&lt;td style="text-align:right">49.477&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Integrated vs Discrete GPU performance&lt;/h4>
Notice that the Intel UHD Graphics device reports lower runtime than the discrete Nvidia RTX 3070 GPU. It is not clear why this is the case, as the Nvidia GPU has more compute resources than the Intel integrated graphics.
&lt;/div>
&lt;p>Also, notice how the &lt;strong>&lt;code>llvmpipe&lt;/code>&lt;/strong> CPU device is between three to four times faster than the &lt;strong>&lt;code>OpenCV&lt;/code>&lt;/strong> function. However, both CPU devices are 2 orders of magnitude slower than the &lt;strong>&lt;code>Nvidia&lt;/code>&lt;/strong> and &lt;strong>&lt;code>Intel&lt;/code>&lt;/strong> GPU devices.&lt;/p>
&lt;h2 id="discussion">Discussion&lt;/h2>
&lt;p>This post showed how to run the camera undistort node in Lluvia. The node takes as input an RGBA image and a camera model stored in a uniform buffer in the GPU, and produces an RGBA output image. The camera model stored in the uniform model must follow the GLSL std140 layout rules. In terms of runtime performance, the GPU implementation is several orders of magnitude faster than the OpenCV default implementation.&lt;/p>
&lt;p>Future pieces of work includes:&lt;/p>
&lt;ul>
&lt;li>Expose the interpolation coordinates for undistorting the images as a new compute node. These coordinates could be cached in order to save computations on every node invocation.&lt;/li>
&lt;li>Clip the undistorted image to a given area according to the camera model. This will be useful to avoid wasted pixels in the output, as shown in the examples.&lt;/li>
&lt;li>Support for more image formats, such as &lt;code>r8ui&lt;/code> and floating point channel types.&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.opencv.org/4.x/dc/dbb/tutorial_py_calibration.html">OpenCV camera calibration routines&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://www.mathworks.com/help/vision/ref/cameracalibrator-app.html">Matlab calibration app&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://vulkan-tutorial.com/Uniform_buffers/Descriptor_layout_and_buffer">Vulkan tutorial on Uniform Buffers&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)">GLSL STD140 memory layout&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://docs.mesa3d.org/drivers/llvmpipe.html">Mesa llvmpipe&lt;/a>.&lt;/li>
&lt;li>Zhang, Z., 2000. A flexible new technique for camera calibration. IEEE Transactions on pattern analysis and machine intelligence, 22(11), pp.1330-1334. &lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr98-71.pdf">Microsoft Technical Report&lt;/a>.&lt;/li>
&lt;li>Wei, G.Q. and De Ma, S., 1994. Implicit and explicit camera calibration: Theory and experiments. IEEE Transactions on Pattern Analysis and Machine Intelligence, 16(5), pp.469-480. &lt;a href="https://doi.org/10.1109/34.291450">DOI&lt;/a>.&lt;/li>
&lt;li>Szeliski, R., 2010. Computer vision: algorithms and applications. Springer Science &amp;amp; Business Media. &lt;a href="https://szeliski.org/Book/">Book&lt;/a>.&lt;/li>
&lt;li>Hartley, R. and Zisserman, A., 2003. Multiple view geometry in computer vision. Cambridge university press. &lt;a href="https://www.cambridge.org/core/books/multiple-view-geometry-in-computer-vision/0B6F289C78B2B23F596CAA76D3D43F7A">Book&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Implementing the Horn and Schunck optical flow algorithm</title><link>/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/</guid><description>
&lt;img src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/featured_Hydrangea_huab2d08a346f77aac20a6565f5879c559_512825_640x0_resize_catmullrom_3.png" width="640" height="107"/>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Jupyter notebook:&lt;/h4>
A Jupyter notebook with the code in this article is available in &lt;a href="https://colab.research.google.com/drive/1SPwxUIdYxCALD0d0w7rE93EuX0fm832S?usp=sharing">Google Colab&lt;/a>. Check it out!
&lt;/div>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>The &lt;a href="https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=en&amp;amp;user=uWsBKQ0AAAAJ&amp;amp;citation_for_view=uWsBKQ0AAAAJ:u5HHmVD_uO8C">Horn and Schunck&lt;/a> variational method for computing optical flow is one of the seminal works in the field. It introduces the idea of using a global smoothness constrain on the estimated optical flow. This constrain helps the numerical solution to find a good flow estimate even in image regions with poor texture.&lt;/p>
&lt;p>Let $\mathbf{E}(x, y, t)$ be the image brightness at point $(x, y)$ and time $t$. Considering the constant brightness assumption, where the change in brightness is zero, that is,&lt;/p>
&lt;p>$$
\frac{d \mathbf{E}}{d t} = 0
$$&lt;/p>
&lt;p>Taking the partial derivatives over $(x, y, t)$, one has:&lt;/p>
&lt;p>$$
\frac{\partial \mathbf{E}}{\partial x} \frac{\partial x}{\partial t} + \frac{\partial \mathbf{E}}{\partial y} \frac{\partial y}{\partial t} + \frac{\partial \mathbf{E}}{\partial t} = 0
$$&lt;/p>
&lt;p>For convenience, let:&lt;/p>
&lt;p>$$
\begin{align*}
\mathbf{E}_x &amp;amp;= \frac{\partial \mathbf{E}}{\partial x} \\
\mathbf{E}_y &amp;amp;= \frac{\partial \mathbf{E}}{\partial y} \\
\mathbf{E}_t &amp;amp;= \frac{\partial \mathbf{E}}{\partial t}
\end{align*}
$$&lt;/p>
&lt;p>be the image gradient in the $x$ and $y$ directions, and the partial derivative in time, respectively, and&lt;/p>
&lt;p>$$
\begin{align}
u &amp;amp;= \frac{\partial x}{\partial t} \\
v &amp;amp;= \frac{\partial y}{\partial t}
\end{align}
$$&lt;/p>
&lt;p>be the $x$ and $y$ components of the optical flow, respectively. The constant brightness equation is then&lt;/p>
&lt;p>$$
\mathbf{E}_x u + \mathbf{E}_y v + \mathbf{E}_t = 0
$$&lt;/p>
&lt;p>which is the basis for the differential methods for computing optical flow (e.g. Lukas-Kanade).&lt;/p>
&lt;h3 id="minimization">Minimization&lt;/h3>
&lt;p>Differential methods for estimating optical flow try to minimize the cost function&lt;/p>
&lt;p>$$
\epsilon_b = \mathbf{E}_x u + \mathbf{E}_y v + \mathbf{E}_t
$$&lt;/p>
&lt;p>that is, to try to find values $(u, v)$ of the optical flow such that the constant brightness constrain is maintained. Notice that there is a single cost funcion and two unknowns $(u, v)$. To solve this, the Horn and Schunck algorithm adds a smoothness constrain based on the average value of the flow in a neighborhood, as&lt;/p>
&lt;p>$$
\epsilon_c^2 = (\bar{u} - u )^2 + (\bar{v} - v)^2
$$&lt;/p>
&lt;p>Combining both cost functions, one has&lt;/p>
&lt;p>$$
\epsilon^2 = \alpha^2 \epsilon_b^2 + \epsilon_c^2
$$&lt;/p>
&lt;p>From these equations, a numerical solution is derived. The reader is encouraged to go to the &lt;a href="https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=en&amp;amp;user=uWsBKQ0AAAAJ&amp;amp;citation_for_view=uWsBKQ0AAAAJ:u5HHmVD_uO8C">paper&lt;/a> for more details. The iterative solution for $(u, v)$ is&lt;/p>
&lt;p>$$
\begin{align*}
u^{n+1} &amp;amp;= \bar{u}^n - \mathbf{E}_x \frac{\mathbf{E}_x \bar{u}^n + \mathbf{E}_y \bar{v}^n + \mathbf{E}_t}{\alpha^2 + \mathbf{E}_x^2 + \mathbf{E}_y^2} \\
v^{n+1} &amp;amp;= \bar{v}^n - \mathbf{E}_y \frac{\mathbf{E}_x \bar{u}^n + \mathbf{E}_y \bar{v}^n + \mathbf{E}_t}{\alpha^2 + \mathbf{E}_x^2 + \mathbf{E}_y^2}
\end{align*}
$$&lt;/p>
&lt;p>where $(u^{n+1}, v^{n+1})$ is the estimated optical flow at iteration $n + 1$, using the estimated flow at previous iterations and image parameters computed from an image pair.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>The figure below illustrates the pipeline implementing the algorithm:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
skinparam linetype ortho
state HS as &amp;#34;HornSchunck&amp;#34; {
state in_gray &amp;lt;&amp;lt;inputPin&amp;gt;&amp;gt;
state ImageProcessor
state ImageNormalize_uint_C1
state NI_1 as &amp;#34;NumericIteration 1&amp;#34;
state NI_2 as &amp;#34;NumericIteration 2&amp;#34;
state NI_3 as &amp;#34;NumericIteration 3&amp;#34;
state NI_N as &amp;#34;NumericIteration N&amp;#34;
in_gray -down-&amp;gt; ImageProcessor
in_gray -down-&amp;gt; ImageNormalize_uint_C1
ImageNormalize_uint_C1 -down-&amp;gt; ImageProcessor: in_gray_old
ImageProcessor -down-&amp;gt; NI_1: in_image_params
ImageProcessor -down-&amp;gt; NI_2
ImageProcessor -down-&amp;gt; NI_3
ImageProcessor -down-&amp;gt; NI_N: in_image_params
NI_1 -&amp;gt; NI_2
NI_2 -&amp;gt; NI_3
NI_3 -&amp;gt; NI_N: ...
NI_N -&amp;gt; NI_1: in_flow, used for next image iteration
NI_N -down-&amp;gt; out_flow &amp;lt;&amp;lt;outputPin&amp;gt;&amp;gt;
ImageNormalize_uint_C1 -down&amp;gt; out_gray &amp;lt;&amp;lt;outputPin&amp;gt;&amp;gt;
}
note top of HS
Parameters
----------
alpha : float. Defaults to 0.05.
Regularization gain.
iterations : int. Defaults to 1.
Number of iterations run to compute the optical flow.
float_precision : int. Defaults to ll.FloatPrecision.FP32.
Floating point precision used accross the algorithm. The outputs out_gray
and out_flow will be of this floating point precision.
end note
@enduml
&lt;/code>&lt;/pre>&lt;p>The &lt;strong>&lt;code>HornSchunck&lt;/code>&lt;/strong> is a &lt;em>ContainerNode&lt;/em> that instantiates several &lt;em>ComputeNode&lt;/em> implementing the algorithm. In particular, the &lt;strong>&lt;code>ImageProcessor&lt;/code>&lt;/strong> node computes image parameters from the pair of images &lt;code>in_gray&lt;/code> and &lt;code>in_gray_old&lt;/code>. Those parameters are transfered to the instances of &lt;strong>&lt;code>NumericIteration&lt;/code>&lt;/strong> through &lt;code>in_image_params&lt;/code>, organized as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;code>in_image_params.x&lt;/code>: X component of the image gradient&lt;/li>
&lt;li>&lt;code>in_image_params.y&lt;/code>: Y component of the image gradient&lt;/li>
&lt;li>&lt;code>in_image_params.z&lt;/code>: temporal derivative between &lt;code>in_gray&lt;/code> and &lt;code>in_gray_old&lt;/code>.&lt;/li>
&lt;li>&lt;code>in_image_params.w&lt;/code>: gain for this pixel computed from image gradient and &lt;code>alpha&lt;/code> parameter.&lt;/li>
&lt;/ul>
&lt;p>This packaging of the image parameters is convenient as all values are packed together in a singe RGBA pixel. The floating point precision of this, and the estimated optical flow is controlled by the &lt;code>float_precision&lt;/code> parameter.&lt;/p>
&lt;p>The &lt;strong>&lt;code>NumericIteration&lt;/code>&lt;/strong> node takes the image parameters and a prior estimation of the optical flow, &lt;code>in_flow&lt;/code>, and computes the next iteration of the flow field. The algorithm requires several iterations for the estimated flow to be of acceptable quality. In the figure above, the last iteration is denoted as &lt;code>NumericIteration_N&lt;/code> and it feeds its output back as input to the first one, as well as the output of the &lt;strong>&lt;code>HornSchunck&lt;/code>&lt;/strong> node. The number of iterations is controlled by the &lt;code>iterations&lt;/code> parameter.&lt;/p>
&lt;p>The code block below shows how to run a simple pipeline:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
skinparam linetype ortho
state RGBA2Gray
state HS as &amp;#34;HornSchunck&amp;#34;
state Flow2RGBA
RGBA2Gray -down-&amp;gt; HS: in_gray
HS -down-&amp;gt; Flow2RGBA: in_flow
@enduml
&lt;/code>&lt;/pre>&lt;p>where &lt;strong>&lt;code>RGBA2Gray&lt;/code>&lt;/strong> converts an input RGBA image to gray scale, &lt;strong>&lt;code>HornSchunck&lt;/code>&lt;/strong> computes the optical flow, and &lt;strong>&lt;code>Flow2RGBA&lt;/code>&lt;/strong> converts the optical flow to color representation.&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Python"
id="tabs-1-0-tab" data-toggle="tab" href="#tabs-1-0" role="tab" onclick="handleClick(&amp;#34;Python&amp;#34;);"
aria-controls="tabs-1-0" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">&lt;div class="tab-pane fade show active"
id="tabs-1-0" role="tabpanel" aria-labelled-by="tabs-1-0-tab">&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">lluvia&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">ll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">lluvia.util&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">ll_util&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">matplotlib.pyplot&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">plt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># read two images as numpy arrays&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>frame_0 &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll_util&lt;span style="color:#000;font-weight:bold">.&lt;/span>readRGBA(&lt;span style="color:#d14">&amp;#39;path to first image...&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>frame_1 &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll_util&lt;span style="color:#000;font-weight:bold">.&lt;/span>readRGBA(&lt;span style="color:#d14">&amp;#39;path to second image...&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># global session and memory objects&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>createSession()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>memory &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createMemory(ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>MemoryPropertyFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>DeviceLocal)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># this is the input of the comple pipeline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>in_rgba &lt;span style="color:#000;font-weight:bold">=&lt;/span> memory&lt;span style="color:#000;font-weight:bold">.&lt;/span>createImageViewFromHost(frame_0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RGBA2Gray &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createComputeNode(&lt;span style="color:#d14">&amp;#39;lluvia/color/RGBA2Gray&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RGBA2Gray&lt;span style="color:#000;font-weight:bold">.&lt;/span>bind(&lt;span style="color:#d14">&amp;#39;in_rgba&amp;#39;&lt;/span>, in_rgba)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RGBA2Gray&lt;span style="color:#000;font-weight:bold">.&lt;/span>init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RGBA2Gray&lt;span style="color:#000;font-weight:bold">.&lt;/span>run() &lt;span style="color:#998;font-style:italic"># run the node immediately in order to populate out_gray with valid values&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>in_gray &lt;span style="color:#000;font-weight:bold">=&lt;/span> RGBA2Gray&lt;span style="color:#000;font-weight:bold">.&lt;/span>getPort(&lt;span style="color:#d14">&amp;#39;out_gray&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HornSchunck &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createContainerNode(&lt;span style="color:#d14">&amp;#39;lluvia/opticalflow/HornSchunck/HornSchunck&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HornSchunck&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;alpha&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#099">0.05&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HornSchunck&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;iterations&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#099">1000&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HornSchunck&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;float_precision&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>FloatPrecision&lt;span style="color:#000;font-weight:bold">.&lt;/span>FP32&lt;span style="color:#000;font-weight:bold">.&lt;/span>value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HornSchunck&lt;span style="color:#000;font-weight:bold">.&lt;/span>bind(&lt;span style="color:#d14">&amp;#39;in_gray&amp;#39;&lt;/span>, in_gray)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># when the node is initialized, it transfers the content of in_gray to out_gray.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HornSchunck&lt;span style="color:#000;font-weight:bold">.&lt;/span>init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out_gray &lt;span style="color:#000;font-weight:bold">=&lt;/span> HornSchunck&lt;span style="color:#000;font-weight:bold">.&lt;/span>getPort(&lt;span style="color:#d14">&amp;#39;out_gray&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out_flow &lt;span style="color:#000;font-weight:bold">=&lt;/span> HornSchunck&lt;span style="color:#000;font-weight:bold">.&lt;/span>getPort(&lt;span style="color:#d14">&amp;#39;out_flow&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Convert the optical flow field to color images&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flow2RGBA &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createComputeNode(&lt;span style="color:#d14">&amp;#39;lluvia/viz/Flow2RGBA&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flow2RGBA&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;max_flow&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#0086b3">float&lt;/span>(&lt;span style="color:#099">2&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flow2RGBA&lt;span style="color:#000;font-weight:bold">.&lt;/span>bind(&lt;span style="color:#d14">&amp;#39;in_flow&amp;#39;&lt;/span>, out_flow)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flow2RGBA&lt;span style="color:#000;font-weight:bold">.&lt;/span>init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out_flow_rgba &lt;span style="color:#000;font-weight:bold">=&lt;/span> flow2RGBA&lt;span style="color:#000;font-weight:bold">.&lt;/span>getPort(&lt;span style="color:#d14">&amp;#39;out_rgba&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>duration &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createDuration()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Record the command buffer to run the pipeline in one go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createCommandBuffer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>begin()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>run(RGBA2Gray)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>memoryBarrier()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>durationStart(duration) &lt;span style="color:#998;font-style:italic"># start recording the duration to measure runtime&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>run(HornSchunck)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>memoryBarrier()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>durationEnd(duration) &lt;span style="color:#998;font-style:italic"># stop recording duration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>run(flow2RGBA)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>end()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># copy the content of the second frame to the in_rgba image before running the whole pipeline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>in_rgba&lt;span style="color:#000;font-weight:bold">.&lt;/span>fromHost(frame_1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># run the pipeline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session&lt;span style="color:#000;font-weight:bold">.&lt;/span>run(cmdBuffer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># print runtime in milliseconds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0086b3">print&lt;/span>(&lt;span style="color:#d14">&amp;#39;&lt;/span>&lt;span style="color:#d14">{0:.02f}&lt;/span>&lt;span style="color:#d14"> ms&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>format(duration&lt;span style="color:#000;font-weight:bold">.&lt;/span>nanoseconds &lt;span style="color:#000;font-weight:bold">/&lt;/span> &lt;span style="color:#099">1e6&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fig &lt;span style="color:#000;font-weight:bold">=&lt;/span> plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>figure(figsize&lt;span style="color:#000;font-weight:bold">=&lt;/span>(&lt;span style="color:#099">10&lt;/span>, &lt;span style="color:#099">6&lt;/span>)); fig&lt;span style="color:#000;font-weight:bold">.&lt;/span>set_tight_layout(&lt;span style="color:#000;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>subplot2grid((&lt;span style="color:#099">1&lt;/span>,&lt;span style="color:#099">2&lt;/span>), (&lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">0&lt;/span>)); plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>imshow(out_gray&lt;span style="color:#000;font-weight:bold">.&lt;/span>toHost(), vmin&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#099">0&lt;/span>, vmax&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#099">1&lt;/span>, cmap&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#39;gray&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>subplot2grid((&lt;span style="color:#099">1&lt;/span>,&lt;span style="color:#099">2&lt;/span>), (&lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">1&lt;/span>)); plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>imshow(out_flow_rgba&lt;span style="color:#000;font-weight:bold">.&lt;/span>toHost())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#000;font-weight:bold">.&lt;/span>show()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="evaluation-on-the-middlebury-dataset">Evaluation on the Middlebury dataset&lt;/h2>
&lt;p>The &lt;a href="https://vision.middlebury.edu/flow/">Middlebury optical flow dataset&lt;/a> from &lt;a href="https://scholar.google.com/scholar?cluster=5697474256105237450&amp;amp;hl=en&amp;amp;as_sdt=0,5">&lt;em>Baker et. al.&lt;/em>&lt;/a> provides several real-life and synthetic image sequences with ground truth optical flow. The figures below shows the estimated optical flow for the test sequences whose ground truth is available.&lt;/p>
&lt;p>The Horn ans Schunck algorithm is not well suited for large pixel displacements. Considering this, the input images are scaled to half before entering the compute pipeline. The ground truth flow is scaled accordingly in order to be compared with the estimated flow. The &lt;em>Endpoint Error&lt;/em> measures the different in magnitude between the ground truth and the estimation, it is computed as:&lt;/p>
&lt;p>$$
EE = \sqrt{(u - u_\text{gt})^2 + (v - v_\text{gt})^2}
$$&lt;/p>
&lt;p>The algorithm is configured as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;code>alpha&lt;/code>: 15.0/255&lt;/li>
&lt;li>&lt;code>iterations&lt;/code>: 2000&lt;/li>
&lt;li>&lt;code>float_precision&lt;/code>: FP32&lt;/li>
&lt;/ul>
&lt;p>In general, the estimated optical flow yields acceptable results in image regions with small displacements (e.g. Dimetrodon, Grove2, Hydrangea, and RubberWhale). In image regions with large displacements, the method is not able to compute a good results, as can be visualized in the Urban2 and Urban3 sequences.&lt;/p>
&lt;p>The results reported in this post were run on a Razer Blade 2021 Laptop equipped with an Nvidia RTX 3070 GPU. The runtime is reported in the title of each figure, and is in the order of 20 milliseconds for most of the image sequences. Section &lt;a href="#runtime-performance">runtime performance&lt;/a> evaluates the performance of the algorithm on different devices, resolutions, and floating point precisions.&lt;/p>
&lt;p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2170px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/Dimetrodon_hub61d6bce717e84d12b94ae8f19c44dbe_380986_2160x360_resize_catmullrom_3.png" width="2160" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2170px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/Grove2_huf062432bdcc4b0dee6f383ad9b4dc7d4_560879_2160x360_resize_catmullrom_3.png" width="2160" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2170px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/Grove3_huf8f2f775eb608ba44f616a33e50d448f_686186_2160x360_resize_catmullrom_3.png" width="2160" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2170px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/featured_Hydrangea_huab2d08a346f77aac20a6565f5879c559_512825_2160x360_resize_catmullrom_3.png" width="2160" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2170px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/RubberWhale_hud2733ea7a567c3bc1da0d8b4b35593bf_468171_2160x360_resize_catmullrom_3.png" width="2160" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2170px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/Urban2_huda8ebcbe92be0174982d6803f056b859_429284_2160x360_resize_catmullrom_3.png" width="2160" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2170px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/Urban3_hu5eb0d8c36b3a768e4992ae76fa94cb32_413470_2160x360_resize_catmullrom_3.png" width="2160" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2170px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/Venus_hu82173b313be1466d9e83f77f2cb695e1_410178_2160x360_resize_catmullrom_3.png" width="2160" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h2 id="runtime-performance">Runtime performance&lt;/h2>
&lt;p>For the runtime analysis of the algorithm, two GPU devices were used:&lt;/p>
&lt;ul>
&lt;li>A Nvidia GTX 1080 Desktop GPU.&lt;/li>
&lt;li>A Nvidia RTX 3070 Laptop GPU running on a Razer Blade 2021.&lt;/li>
&lt;/ul>
&lt;p>The Horn and Schunck pipeline is configured using the same number of iterations used for the Middlebury evalatuon, that is, &lt;code>iterations = 2000&lt;/code>. The pipeline is configured for 5 different image resolutions (&lt;code>VGA 640x480&lt;/code>, &lt;code>HD 1280x720&lt;/code>, &lt;code>HD 1920x1080&lt;/code>, &lt;code>WQHD 2560x1440&lt;/code>, &lt;code>UHD 3840x2160&lt;/code>). For each resolution, the pipeline is run both using &lt;code>FP16&lt;/code> and &lt;code>FP32&lt;/code> floating point precision. The table and figure below show the runtime performance for each configuration.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Resolution&lt;/th>
&lt;th style="text-align:left">Float precision&lt;/th>
&lt;th style="text-align:left">Device&lt;/th>
&lt;th style="text-align:right">Runtime median (ms)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">VGA 640x480&lt;/td>
&lt;td style="text-align:left">FP16&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">68.8196&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">39.4354&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">FP32&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">97.5005&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">63.6458&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">HD 1280x720&lt;/td>
&lt;td style="text-align:left">FP16&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">193.977&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">115.626&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">FP32&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">279.538&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">175.635&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">HD 1920x1080&lt;/td>
&lt;td style="text-align:left">FP16&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">429.256&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">257.624&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">FP32&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">623.555&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">386.718&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">WQHD 2560x1440&lt;/td>
&lt;td style="text-align:left">FP16&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">757.101&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">449.536&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">FP32&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">1099.35&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">682.558&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">UHD 3840x2160&lt;/td>
&lt;td style="text-align:left">FP16&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">1694.16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">1010.16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">FP32&lt;/td>
&lt;td style="text-align:left">GTX 1080&lt;/td>
&lt;td style="text-align:right">2453.45&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">RTX 3070&lt;/td>
&lt;td style="text-align:right">1551.34&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>It is not surprising that the RTX 3070 GPU is faster than the GTX 1080, as the former is of a newer generation than the latter.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 2010px">
&lt;img class="card-img-top" src="/blog/2022/08/07/implementing-the-horn-and-schunck-optical-flow-algorithm/runtime_hu8436b281ec8250665a25e3f2104e6842_65108_2000x500_resize_catmullrom_3.png" width="2000" height="500">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="discussion">Discussion&lt;/h2>
&lt;p>This post presented a GPU implementation of the Horn and Schunck optical flow algorithm. Evaluation in the Middlebury test sequences show the validity of the implementation. A runtime performance analysis was conducted on two GPUs using several image resolutions and floatin point precisions.&lt;/p>
&lt;p>Future work includes:&lt;/p>
&lt;ul>
&lt;li>Implementing a pyramidal scheme, for instance that of &lt;a href="https://scholar.google.com/scholar?cluster=16090950858323308671&amp;amp;hl=en&amp;amp;as_sdt=0,5">Llopis &lt;em>et. al.&lt;/em>&lt;/a>, to improve the accuracy of the algorithm in presence of large displacements.&lt;/li>
&lt;li>Use the smoothness constrain and numerical scheme in the &lt;a href="https://scholar.google.com/scholar?cluster=8318694254870078457&amp;amp;hl=en&amp;amp;as_sdt=0,5">FlowFilter algorithm&lt;/a> to improve the accuracy.&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>Horn, Berthold KP, and Brian G. Schunck. &amp;ldquo;Determining optical flow.&amp;rdquo; Artificial intelligence 17.1-3 (1981): 185-203. &lt;a href="https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=en&amp;amp;user=uWsBKQ0AAAAJ&amp;amp;citation_for_view=uWsBKQ0AAAAJ:u5HHmVD_uO8C">Google Scholar&lt;/a>.&lt;/li>
&lt;li>Baker, S., Scharstein, D., Lewis, J.P., Roth, S., Black, M.J. and Szeliski, R., 2011. A database and evaluation methodology for optical flow. International journal of computer vision, 92(1), pp.1-31. &lt;a href="https://scholar.google.com/scholar?cluster=5697474256105237450&amp;amp;hl=en&amp;amp;as_sdt=0,5">Google Scholar&lt;/a>.&lt;/li>
&lt;li>Meinhardt-Llopis, E. and SÃ¡nchez, J., 2013. Horn-schunck optical flow with a multi-scale strategy. Image Processing on line. &lt;a href="https://scholar.google.com/scholar?cluster=16090950858323308671&amp;amp;hl=en&amp;amp;as_sdt=0,5">Google Scholar&lt;/a>&lt;/li>
&lt;li>Adarve, Juan David, and Robert Mahony. &amp;ldquo;A filter formulation for computing real time optical flow.&amp;rdquo; IEEE Robotics and Automation Letters 1.2 (2016): 1192-1199. &lt;a href="https://scholar.google.com/scholar?cluster=8318694254870078457&amp;amp;hl=en&amp;amp;as_sdt=0,5">Google Scholar&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Working with floating point precision</title><link>/blog/2022/02/12/working-with-floating-point-precision/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>/blog/2022/02/12/working-with-floating-point-precision/</guid><description>
&lt;img src="/blog/2022/02/12/working-with-floating-point-precision/featured_flowfilter_fp_comparison_hud9d88ea9fb9f1e39cebf655ece1d7d28_34275_640x0_resize_catmullrom_3.png" width="640" height="213"/>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Jupyter notebook:&lt;/h4>
A Jupyter notebook with the code in this article is available in &lt;a href="https://colab.research.google.com/drive/1bddxWnYp8Rloiv4helVJznFe7NzwxxsJ?usp=sharing">Google Colab&lt;/a>. Check it out!
&lt;/div>
&lt;p>GPU devices support several floating point number precisions, where precision refers to the number of bits used for representing a given number. Typical representations are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>FP16&lt;/code>&lt;/strong>: or half precision. Numbers are represented in 16 bits.&lt;/li>
&lt;li>&lt;strong>&lt;code>FP32&lt;/code>&lt;/strong>: or single precision. It uses 32 bits for representing a number.&lt;/li>
&lt;li>&lt;strong>&lt;code>FP64&lt;/code>&lt;/strong>: or doble precision. 64 bits are used for represeting a number.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>FP64&lt;/code>&lt;/strong> is used when numerical precision is required, while &lt;strong>&lt;code>FP16&lt;/code>&lt;/strong> is suitable for fast, less exact calculations, and &lt;strong>&lt;code>FP32&lt;/code>&lt;/strong> sits in the middle. The &lt;a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754 standard&lt;/a> defines the specification of floating point numbers used in modern computers. It defines the rules for interpreting the bit fields that form a number, as well as the arithmetic rules to process them.&lt;/p>
&lt;p>The Vulkan API offers support for the three floating point precisions. However, not all GPUs support every format. The &lt;a href="http://vulkan.gpuinfo.org/listdevices.php">Vulkan GPU Info page&lt;/a> is great tool to check support for a given feature.&lt;/p>
&lt;h2 id="improvements-in-runtime-performance">Improvements in runtime performance&lt;/h2>
&lt;p>Smaller bit representation of floating point numbers have an advantage in terms of runtime performance. Consider the case of a &lt;strong>RGBA&lt;/strong> image. If the image channel type is &lt;code>ll.ChannelType.Float16&lt;/code>, the four pixel values will fit in 8 bytes, compared to the 16 bytes needed if &lt;code>ll.ChannelType.Float32&lt;/code> was used. This reduction in memory footprint increases the pixel transfer rate from memory to the compute device.&lt;/p>
&lt;p>To illustrate this, let&amp;rsquo;s consider the &lt;a href="nodes/lluvia/opticalflow/flowfilter/flowfilter/">&lt;em>optical flow filter&lt;/em> node&lt;/a>. The code below configures the flowfilter algorithm both with &lt;code>ll.FloatPrecision.FP16&lt;/code> and &lt;code>ll.FloatPrecision.FP32&lt;/code>, it runs each node for &lt;code>N = 10000&lt;/code> iterations and collects its runtime using the &lt;code>duration&lt;/code> probe.&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Python"
id="tabs-1-0-tab" data-toggle="tab" href="#tabs-1-0" role="tab" onclick="handleClick(&amp;#34;Python&amp;#34;);"
aria-controls="tabs-1-0" aria-selected="true">
Python
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">&lt;div class="tab-pane fade show active"
id="tabs-1-0" role="tabpanel" aria-labelled-by="tabs-1-0-tab">&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">lluvia&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">ll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">import&lt;/span> &lt;span style="color:#555">numpy&lt;/span> &lt;span style="color:#000;font-weight:bold">as&lt;/span> &lt;span style="color:#555">np&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>createSession()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>memory &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createMemory([ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>MemoryPropertyFlagBits&lt;span style="color:#000;font-weight:bold">.&lt;/span>DeviceLocal])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>host_rgba &lt;span style="color:#000;font-weight:bold">=&lt;/span> np&lt;span style="color:#000;font-weight:bold">.&lt;/span>zeros((&lt;span style="color:#099">1016&lt;/span>, &lt;span style="color:#099">544&lt;/span>, &lt;span style="color:#099">4&lt;/span>), dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>uint8)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>in_rgba &lt;span style="color:#000;font-weight:bold">=&lt;/span> memory&lt;span style="color:#000;font-weight:bold">.&lt;/span>createImageViewFromHost(host_rgba)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RGBA2Gray &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createComputeNode(&lt;span style="color:#d14">&amp;#39;lluvia/color/RGBA2Gray&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RGBA2Gray&lt;span style="color:#000;font-weight:bold">.&lt;/span>bind(&lt;span style="color:#d14">&amp;#39;in_rgba&amp;#39;&lt;/span>, in_rgba)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RGBA2Gray&lt;span style="color:#000;font-weight:bold">.&lt;/span>init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#099">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>runtimeMilliseconds &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>FloatPrecision&lt;span style="color:#000;font-weight:bold">.&lt;/span>FP16 : np&lt;span style="color:#000;font-weight:bold">.&lt;/span>zeros((N), dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>float32),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>FloatPrecision&lt;span style="color:#000;font-weight:bold">.&lt;/span>FP32 : np&lt;span style="color:#000;font-weight:bold">.&lt;/span>zeros((N), dtype&lt;span style="color:#000;font-weight:bold">=&lt;/span>np&lt;span style="color:#000;font-weight:bold">.&lt;/span>float32)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">for&lt;/span> precision &lt;span style="color:#000;font-weight:bold">in&lt;/span> [ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>FloatPrecision&lt;span style="color:#000;font-weight:bold">.&lt;/span>FP32, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>FloatPrecision&lt;span style="color:#000;font-weight:bold">.&lt;/span>FP16]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createContainerNode(&lt;span style="color:#d14">&amp;#39;lluvia/opticalflow/flowfilter/FlowFilter&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;levels&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#099">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;max_flow&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#099">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;smooth_iterations&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#099">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;gamma&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#099">0.0005&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;gamma_low&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(&lt;span style="color:#099">0.0005&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic"># use selected floating point precision&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter&lt;span style="color:#000;font-weight:bold">.&lt;/span>setParameter(&lt;span style="color:#d14">&amp;#39;float_precision&amp;#39;&lt;/span>, ll&lt;span style="color:#000;font-weight:bold">.&lt;/span>Parameter(precision&lt;span style="color:#000;font-weight:bold">.&lt;/span>value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter&lt;span style="color:#000;font-weight:bold">.&lt;/span>bind(&lt;span style="color:#d14">&amp;#39;in_gray&amp;#39;&lt;/span>, RGBA2Gray&lt;span style="color:#000;font-weight:bold">.&lt;/span>getPort(&lt;span style="color:#d14">&amp;#39;out_gray&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowFilter&lt;span style="color:#000;font-weight:bold">.&lt;/span>init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> duration &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createDuration()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer &lt;span style="color:#000;font-weight:bold">=&lt;/span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>createCommandBuffer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>begin()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>run(RGBA2Gray)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>memoryBarrier()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic"># probe the runtime of the flowfilter node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>durationStart(duration)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>run(flowFilter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>memoryBarrier()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>durationEnd(duration)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmdBuffer&lt;span style="color:#000;font-weight:bold">.&lt;/span>end()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic"># run the command buffer N times and collect the runtime of the flow algorithm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">for&lt;/span> n &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#0086b3">range&lt;/span>(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session&lt;span style="color:#000;font-weight:bold">.&lt;/span>run(cmdBuffer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runtimeMilliseconds[precision][n] &lt;span style="color:#000;font-weight:bold">=&lt;/span> duration&lt;span style="color:#000;font-weight:bold">.&lt;/span>nanoseconds &lt;span style="color:#000;font-weight:bold">/&lt;/span> &lt;span style="color:#099">1e6&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/div>
&lt;/div>
&lt;p>Here, the &lt;code>ll.FloatPrecision.FP16, ll.FloatPrecision.FP32&lt;/code> are new enum values for representing 16-bit and 32-bit floating point precision, respectively. The line &lt;code>flowFilter.setParameter('float_precision', ll.Parameter(precision.value))&lt;/code> configures the node with the given precision. Internally, the &lt;code>float_precision&lt;/code> is used to instantiate any floating point image with the requested precision.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
By convention, any node that allows selecting floating point precision will define the &lt;strong>&lt;code>float_precision&lt;/code>&lt;/strong> parameter and will expect one of the &lt;code>ll.FloatPrecision&lt;/code> enum values.
&lt;/div>
&lt;p>The figure below shows the collected runtime for both floating point precisions. The median runtime for &lt;strong>&lt;code>FP16&lt;/code>&lt;/strong> is 0.501ms, while for &lt;strong>&lt;code>FP32&lt;/code>&lt;/strong> is 0.770ms. That is, the &lt;strong>&lt;code>FP16&lt;/code>&lt;/strong> algorithm improves the runtime by 35% compared to &lt;strong>&lt;code>FP32&lt;/code>&lt;/strong>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1090px">
&lt;img class="card-img-top" src="/blog/2022/02/12/working-with-floating-point-precision/featured_flowfilter_fp_comparison_hud9d88ea9fb9f1e39cebf655ece1d7d28_34275_1080x360_fill_catmullrom_smart1_3.png" width="1080" height="360">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Optical flow filter runtime using FP16 and FP32 floating point precision. Results collected on a Nvidia GTX-1080 (driver 460.91.03) running Ubuntu 20.04.
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="modifications-to-glsl-shader-code">Modifications to GLSL shader code&lt;/h2>
&lt;p>In terms of GLSL shader code, there are no changes to support FP16 or FP32 images. However, it is important to understand the underlying functioning. For instance, consider the GLSL implementation of the &lt;a href="/nodes/lluvia/color/rgba2hsva/">&lt;code>RGBA2HSVA&lt;/code>&lt;/a> compute node. Notice that the &lt;strong>&lt;code>out_hsva&lt;/code>&lt;/strong> port is bound to the shader as a &lt;code>rgba32f&lt;/code> image:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-4" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-GLSL"
id="tabs-4-0-tab" data-toggle="tab" href="#tabs-4-0" role="tab" onclick="handleClick(&amp;#34;GLSL&amp;#34;);"
aria-controls="tabs-4-0" aria-selected="true">
GLSL
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-4-content">&lt;div class="tab-pane fade show active"
id="tabs-4-0" role="tabpanel" aria-labelled-by="tabs-4-0-tab">&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-glsl" data-lang="glsl">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#999;font-weight:bold;font-style:italic">#version 450&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#999;font-weight:bold;font-style:italic">#include &amp;lt;lluvia/core.glsl&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#999;font-weight:bold;font-style:italic">#include &amp;lt;lluvia/core/color.glsl&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layout(binding &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>, rgba8ui) &lt;span style="color:#000;font-weight:bold">uniform&lt;/span> uimage2D in_rgba;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layout(binding &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#099">1&lt;/span>, rgba32f) &lt;span style="color:#000;font-weight:bold">uniform&lt;/span> writeonly image2D out_hsva;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layout(push_constant) &lt;span style="color:#000;font-weight:bold">uniform&lt;/span> const_0 {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">float&lt;/span> min_chroma;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} params;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">void&lt;/span> main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">float&lt;/span> min_chroma &lt;span style="color:#000;font-weight:bold">=&lt;/span> params.min_chroma;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">ivec2&lt;/span> coords &lt;span style="color:#000;font-weight:bold">=&lt;/span> LL_GLOBAL_COORDS_2D;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">ivec2&lt;/span> imgSize &lt;span style="color:#000;font-weight:bold">=&lt;/span> imageSize(out_hsva);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">if&lt;/span> (coords.x &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> imgSize.x &lt;span style="color:#000;font-weight:bold">||&lt;/span> coords.y &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> imgSize.y) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> uvec4 RGBA &lt;span style="color:#000;font-weight:bold">=&lt;/span> imageLoad(in_rgba, coords);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">vec4&lt;/span> HSVA &lt;span style="color:#000;font-weight:bold">=&lt;/span> color_rgba2hsva(RGBA, min_chroma);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imageStore(out_hsva, coords, HSVA);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/div>
&lt;/div>
&lt;p>Images compatible with the &lt;code>rgba32f&lt;/code> image format can be bound as output. The &lt;a href="https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_shader_image_load_store.txt">shader image load store extension&lt;/a> defines the compatibility rules to be able to bind images to shaders. For this case in particular, it is possible to bind either a &lt;code>rgba16f&lt;/code> or &lt;code>rgba32f&lt;/code> images to the output. The shader will execute all arithmetic operations using 32-bit floating point precision. When storing an image texel using &lt;code>imageStore(out_hsva, coords, HSVA)&lt;/code>, the shader will reinterpret the &lt;code>vec4 HSVA&lt;/code> either as a 16 or 32-bit floating vector, according to the image bound to &lt;code>out_hsva&lt;/code>.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
The &lt;a href="https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_shader_image_load_store.txt">shader image load store extension&lt;/a> describes the way texels are re-interepret during load/store operations.
&lt;/div>
&lt;p>In terms of &lt;em>Lua&lt;/em> code to build the node, these are the considerations to support different precisions:&lt;/p>
&lt;ul>
&lt;li>Define the &lt;strong>&lt;code>float_precision&lt;/code>&lt;/strong> parameter with default value to &lt;code>ll.FloatPrecision.FP32&lt;/code>.&lt;/li>
&lt;li>Allocate the node objects according to the selected precision.&lt;/li>
&lt;/ul>
&lt;p>In the code below, line &lt;code>local outImageChannelType = ll.floatPrecisionToImageChannelType(float_precision)&lt;/code> transforms the recevied &lt;code>ll.FloatPrecision&lt;/code> value to the corresponding &lt;code>ll.ChannelType&lt;/code>. Then, &lt;code>out_hsva&lt;/code> is created and bound to the node.&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-6" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Lua"
id="tabs-6-0-tab" data-toggle="tab" href="#tabs-6-0" role="tab" onclick="handleClick(&amp;#34;Lua&amp;#34;);"
aria-controls="tabs-6-0" aria-selected="true">
Lua
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-6-content">&lt;div class="tab-pane fade show active"
id="tabs-6-0" role="tabpanel" aria-labelled-by="tabs-6-0-tab">&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">local&lt;/span> builder &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll.class(ll.ComputeNodeBuilder)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.name &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;lluvia/color/RGBA2HSVA&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">builder&lt;/span>.&lt;span style="color:#900;font-weight:bold">newDescriptor&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> desc &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll.ComputeNodeDescriptor.new()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> desc:init(builder.name, ll.ComputeDimension.D2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">-- define the float_precision parameter with default value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> desc:setParameter(&lt;span style="color:#d14">&amp;#39;float_precision&amp;#39;&lt;/span>, ll.FloatPrecision.FP32)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> in_rgba &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll.PortDescriptor.new(&lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#d14">&amp;#39;in_rgba&amp;#39;&lt;/span>, ll.PortDirection.In, ll.PortType.ImageView)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in_rgba:checkImageChannelCountIs(ll.ChannelCount.C4)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in_rgba:checkImageChannelTypeIs(ll.ChannelType.Uint8)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> desc:addPort(in_rgba)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> desc:addPort(ll.PortDescriptor.new(&lt;span style="color:#099">1&lt;/span>, &lt;span style="color:#d14">&amp;#39;out_hsva&amp;#39;&lt;/span>, ll.PortDirection.Out, ll.PortType.ImageView))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">return&lt;/span> desc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">builder&lt;/span>.&lt;span style="color:#900;font-weight:bold">onNodeInit&lt;/span>(node)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> in_rgba &lt;span style="color:#000;font-weight:bold">=&lt;/span> node:getPort(&lt;span style="color:#d14">&amp;#39;in_rgba&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">-- receive the selected float_precision&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> float_precision &lt;span style="color:#000;font-weight:bold">=&lt;/span> node:getParameter(&lt;span style="color:#d14">&amp;#39;float_precision&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">-- transform float precision to a suitable image channel type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> outImageChannelType &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll.floatPrecisionToImageChannelType(float_precision)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">-------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">-- allocate out_hsva&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">-------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> imgDesc &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll.ImageDescriptor.new()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgDesc.width &lt;span style="color:#000;font-weight:bold">=&lt;/span> in_rgba.width
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgDesc.height &lt;span style="color:#000;font-weight:bold">=&lt;/span> in_rgba.height
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgDesc.depth &lt;span style="color:#000;font-weight:bold">=&lt;/span> in_rgba.depth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgDesc.channelCount &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll.ChannelCount.C4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgDesc.channelType &lt;span style="color:#000;font-weight:bold">=&lt;/span> outImageChannelType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> imgViewDesc &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll.ImageViewDescriptor.new()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgViewDesc.filterMode &lt;span style="color:#000;font-weight:bold">=&lt;/span> ll.ImageFilterMode.Nearest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgViewDesc.normalizedCoordinates &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgViewDesc.isSampled &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imgViewDesc:setAddressMode(ll.ImageAddressMode.Repeat)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">-- ll::Memory where out_hsva will be allocated&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> memory &lt;span style="color:#000;font-weight:bold">=&lt;/span> in_rgba.memory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">local&lt;/span> out_hsva &lt;span style="color:#000;font-weight:bold">=&lt;/span> memory:createImageView(imgDesc, imgViewDesc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">-- need to change image layout before binding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out_hsva:changeImageLayout(ll.ImageLayout.General)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node:bind(&lt;span style="color:#d14">&amp;#39;out_hsva&amp;#39;&lt;/span>, out_hsva)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node:configureGridShape(ll.vec3ui.new(out_hsva.width, out_hsva.height, &lt;span style="color:#099">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">-- register builder in the system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ll.registerNodeBuilder(builder)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/div>
&lt;/div>
&lt;h2 id="discussion">Discussion&lt;/h2>
&lt;p>There are several floating point precisions available to use in compute shaders: &lt;strong>&lt;code>FP16&lt;/code>&lt;/strong>, &lt;strong>&lt;code>FP132&lt;/code>&lt;/strong>, and &lt;strong>&lt;code>FP64&lt;/code>&lt;/strong>, are the ones more commonly available in commodity GPU hardware. The ability to control the underlying floating point precision used in compute pipelines can improve runtime performance, as the transfer rate of data from and to memory can increase. The choice of a given precision must be made carefully, as it might affect the accuracy of the algorithm.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754 standard&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://vulkan.gpuinfo.org/listdevices.php">Vulkan GPU Info page&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_shader_image_load_store.txt">OpenGL shader image load-store extension&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>