
#version 450

#include <lluvia/core.glsl>

layout(binding = 0, r32f)  uniform image2D in_gray;
layout(binding = 1, rg32f) uniform image2D in_gradient;
layout(binding = 2, r32f)  uniform image2D in_gray_old;
layout(binding = 3, rg32f) uniform image2D in_flow;

layout(binding = 4, r32f) uniform image2D out_gray;
layout(binding = 5, rg32f) uniform image2D out_flow;

layout(push_constant) uniform const_0 {
    float gamma;
    float maxflow;
} params;

void main() {

    // FIXME: set as parameters
    const float gamma = params.gamma;
    const float maxflow = params.maxflow;

    // this coordinates are relative to out_gradient size
    const ivec2 coords  = LL_GLOBAL_COORDS_2D;
    const ivec2 imgSize = imageSize(in_gray);

    if (coords.x > imgSize.x || coords.y > imgSize.y) {
        return;
    }

    const float gray = imageLoad(in_gray, coords).r;
    const float gray_old = imageLoad(in_gray_old, coords).r;

    const vec2 gray_gradient = imageLoad(in_gradient, coords).xy;
    const vec2 flow_old = imageLoad(in_flow, coords).xy;

    // temporal derivative
    const float gray_dt = gray_old - gray;
    
    // squared gradient
    const vec2 grad_square = gray_gradient * gray_gradient;

    // Adjunt matrix
    const float diag_off = gray_gradient.x * gray_gradient.y;
    const mat2 M = mat2(gamma + grad_square.y, -diag_off, -diag_off, gamma + grad_square.x);

    // reciprocal determinand of M
    const float rdet = 1.0f / (gamma * (gamma + grad_square.x + grad_square.y));

    const vec2 q = (gamma * flow_old) + (gray_dt * gray_gradient);

    vec2 flow_new = rdet * (M * q);

    // truncate
    flow_new.x = max(-maxflow, min(flow_new.x, maxflow));
    flow_new.y = max(-maxflow, min(flow_new.y, maxflow));

    // sanitize
    flow_new.x = isinf(flow_new.x) || isnan(flow_new.x)? 0.0f : flow_new.x;
    flow_new.y = isinf(flow_new.y) || isnan(flow_new.y)? 0.0f : flow_new.y;

    imageStore(out_flow, coords, vec4(flow_new.x, flow_new.y, 0, 0));
    imageStore(out_gray, coords, vec4(gray));
    imageStore(in_gray_old, coords, vec4(gray));
}
